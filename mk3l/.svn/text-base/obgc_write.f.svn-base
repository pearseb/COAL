c Purpose
c -------
c Writes the OBGC data to a file.
c
c Inputs
c ------
c None
c
c Outputs
c -------
c None
c
c History
c -------

      subroutine obgc_write()

      implicit none
      include 'netcdf.inc'
C Global parameters
      include 'OPARAMS.f'

C Argument list

C Global data blocks
      include 'FILES.f'
      include 'ORESTART.f'
      include 'VERSION.f'

      include 'ONEDIM.f'
      include 'bio.h'
      include 'extra.h'

C Local work arrays and variables
      character*4 file, qnumber
      character*11 qfile
      integer ncid, status, imtid, jmtid, kmid, lsegid, lsegfid,
     &        nisleid, njtbftid, njtbfuid, nstep2id, ittid, ttsecid,
     &        areaid, volumeid, pbid, pid, hrid, ptd2id, iszid, iezid,
     &        isisid, ieisid, jsisid, jeisid, istfid, ietfid, isufid,
     &        ieufid, iszfid, iezfid, tid, sid, uid, vid, kmtid, kmuid,
     &        lontsid, lattsid, ztsid, lmtid, timid
      integer i, j, k, l

      real*4 xt(imt), lonts(imt), latts(jmt), zts(km), tim0(1)
      real*8 missing_value, pi, r2d, radius
      parameter (file = "obgc")
      parameter (missing_value=-9999.9)

* rjm
      character*6 obgc_tr
      integer obgc_id(nt),ofbgc_id(nbio2d)
      integer m,inum
      save inum 
      data inum /1000/
* rjm

C Start code : ------------------------------------------------------------

c Set up values for spatial axes.  
c  mac, feb09

      pi = 3.14159265
      r2d = 180.0/pi
      radius = 6.37122e8

c Code for determining longitude taken from code in ocend.f used to
c  write the ocean output file (fort.40).  
      xt(1) = 0.0 - 1.5 * 360.0/real(imt-2)
      do i = 2, imt
        xt(i) = xt(i-1) + (dxt(i) * r2d / radius)
      enddo
      do i=1,imt
c Code copied from convert_averages/construct_axes.F90 to calc longitude
c  Gives the same answer for full resolution.  mac, feb09
c       lonts(i)=(real(i-2, 4)-0.5) * 360.0 / real(imt-2, 4)
       lonts(i)=xt(i)
      enddo

      do j=1,jmt
       latts(j)=phit(j)*r2d
      enddo

      do k=1,km
c convert cm to m for depth coordinate
       zts(k)=zdzz(k)*0.01
      enddo

      tim0(1)=ttsec/86400

c...  Create netCDF file
	inum=inum+1
	write(qfile,'(a4,i4,a3)') file,inum,".nc"
        write (*, *) "***  netCDF output ", qfile
      status = nf_create(trim(qfile), nf_write, ncid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not create file ", qfile
        write (*, *)
        stop
      end if
      	
c...  Define dimensions
      status = nf_def_dim(ncid, "lonts", imt-2, imtid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not define dimension"
        write (*, *)
        write (*, *) "***  File      =  ", file
        write (*, *) "***  Dimension =  lonts"
        write (*, *)
        stop
      end if
      status = nf_def_dim(ncid, "latts", jmt-2, jmtid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not define dimension"
        write (*, *)
        write (*, *) "***  File      =  ", file
        write (*, *) "***  Dimension =  jmt"
        write (*, *)
        stop
      end if
      status = nf_def_dim(ncid, "zts", km, kmid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not define dimension"
        write (*, *)
        write (*, *) "***  File      =  ", file
        write (*, *) "***  Dimension =  km"
        write (*, *)
        stop
      end if
c      status = nf_def_dim(ncid, "lseg", 12, lsegid)
c      if (status .ne. nf_noerr) then
c        write (*, *)
c        write (*, *) "***  netCDF error: Could not define dimension"
c        write (*, *)
c        write (*, *) "***  File      =  ", file
c        write (*, *) "***  Dimension =  lseg"
c        write (*, *)
c        stop
c      end if
c      status = nf_def_dim(ncid, "time", NF_UNLIMITED, lmtid)
      status = nf_def_dim(ncid, "time", nf_unlimited, lmtid)
      if (status /= nf_noerr) stop "netCDF error is defining lmtid"

c...  Define variables
      status = nf_def_var(ncid, "lonts", nf_float, 1, imtid, lontsid)
      if (status /= nf_noerr) stop "netCDF error in write_averages"
      status = nf_put_att_text(ncid, lontsid, "units", 12, 
     & "degrees_east")
      if (status /= nf_noerr) stop "netCDF error in write_averages"
      status = nf_put_att_text(ncid, lontsid, "long_name", 27, 
     &                      "Longitude of TS grid points")
      if (status /= nf_noerr) stop "netCDF error in write_averages"
      status = nf_put_att_text(ncid, lontsid, "point_spacing", 4, 
     & "even")
      if (status /= nf_noerr) stop "netCDF error in write_averages"
      status = nf_put_att_text(ncid, lontsid, "modulo", 1, " ")
      if (status /= nf_noerr) stop "netCDF error in write_averages"

      status = nf_def_var(ncid, "latts", nf_float, 1, jmtid, lattsid)
      if (status /= nf_noerr) stop "netCDF error in write_averages"
      status = nf_put_att_text(ncid, lattsid, "units", 13, 
     & "degrees_north")
      if (status /= nf_noerr) stop "netCDF error in write_averages"
      status = nf_put_att_text(ncid, lattsid, "long_name", 26, 
     &                      "Latitude of TS grid points")
      if (status /= nf_noerr) stop "netCDF error in write_averages"
      status = nf_put_att_text(ncid, lattsid, "point_spacing", 4, 
     & "even")
      if (status /= nf_noerr) stop "netCDF error in write_averages"

      status = nf_def_var(ncid, "zts", nf_float, 1, kmid, ztsid)
      if (status /= nf_noerr) stop "netCDF error in write_averages1"
      status = nf_put_att_text(ncid, ztsid, "units", 1, 
     & "m")
      if (status /= nf_noerr) stop "netCDF error in write_averages2"
      status = nf_put_att_text(ncid, ztsid, "long_name", 23, 
     &                      "Depth of TS grid points")
      if (status /= nf_noerr) stop "netCDF error in write_averages3"
      status = nf_put_att_text(ncid, ztsid, "point_spacing", 6, 
     & "uneven")
      if (status /= nf_noerr) stop "netCDF error in write_averages4"
      status = nf_put_att_text(ncid, ztsid, "positive", 4, 
     & "down")
      if (status /= nf_noerr) stop "netCDF error in write_averages5"
      
      status = nf_def_var(ncid, "time", nf_float, 1, lmtid, timid)
      if (status /= nf_noerr) stop "netCDF error defining time"
      status = nf_put_att_text(ncid, timid, "long_name", 25, 
     &                      "Time since start of model")
      if (status /= nf_noerr) stop "netCDF error defining time"
      status = nf_put_att_text(ncid, timid, "units", 5, 
     &                      "days")
      if (status /= nf_noerr) stop "netCDF error defining time"

      status = nf_def_var(ncid, "itt", nf_int, 0, 0, ittid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not define variable"
        write (*, *)
        write (*, *) "***  File     =  ", file
        write (*, *) "***  Variable =  itt"
        write (*, *)
        stop
      end if
c      status = nf_def_var(ncid, "EP", nf_double, 2, (/ imtid, jmtid /),
c     &                    pbid)
c      if (status .ne. nf_noerr) then
c        write (*, *)
c        write (*, *) "***  netCDF error: Could not define variable"
c        write (*, *)
c        write (*, *) "***  File     =  ", file
c        write (*, *) "***  Variable =  EP"
c        write (*, *)
c        stop
c      end if
c      status = nf_def_var(ncid,"pco2", nf_double, 2, (/ imtid, jmtid /),
c     &                    pid)
c      if (status .ne. nf_noerr) then
c        write (*, *)
c        write (*, *) "***  netCDF error: Could not define variable"
c        write (*, *)
c        write (*, *) "***  File     =  ", file
c        write (*, *) "***  Variable =  pco2"
c        write (*, *)
c        stop
c      end if

* rjm obgc
* Loop through the biogeochem. tracers.  
      do m=1,nt
       write(obgc_tr,'(a5,i1)') "obgc0",m
       if (m.gt. 9) write(obgc_tr,'(a4,i2)') "obgc",m
       print*,obgc_tr

       status = nf_def_var(ncid, obgc_tr, nf_double, 4,
     &         (/ imtid, jmtid, kmid, lmtid/), obgc_id(m) )
       if (status .ne. nf_noerr) then
         write (*, *)
         write (*, *) "***  netCDF error: Could not define variable"
         write (*, *)
         write (*, *) "***  File     =  ", file
         write (*, *) "***  Variable = ",obgc_tr
         write (*, *)
         stop
       end if
       write(obgc_tr,'(a1,i1)') "0",m
       if (m.gt. 9) write(obgc_tr,'(i2)') m
       status = nf_put_att_text(ncid, obgc_id(m), "long_name", 15, 
     &     trname(m) // obgc_tr )
       if (status /= nf_noerr) stop "netCDF error in obgc_write"
       status = nf_put_att_double(ncid, obgc_id(m), "missing_value", 
     &     nf_double, 1, missing_value)
       if (status /= nf_noerr) stop "netCDF error in obgc_write"
       status = nf_put_att_double(ncid, obgc_id(m), "_FillValue", 
     &     nf_double, 1, missing_value )
       if (status /= nf_noerr) stop "netCDF error in obgc_write"
      enddo

* Loop through the biogeochem. fluxes.  
      do m=1,nbio2d
       write(obgc_tr,'(a5,i1)') "bflx0",m
       if (m.gt. 9) write(obgc_tr,'(a4,i2)') "bflx",m
       print*,obgc_tr

       status = nf_def_var(ncid, obgc_tr, nf_double, 3,
     &         (/ imtid, jmtid, lmtid /), ofbgc_id(m) )
       if (status .ne. nf_noerr) then
         write (*, *)
         write (*, *) "***  netCDF error: Could not define variable"
         write (*, *)
         write (*, *) "***  File     =  ", file
         write (*, *) "***  Variable = ",obgc_tr
         write (*, *)
         stop
       end if
       write(obgc_tr,'(a1,i1)') "0",m
       if (m.gt. 9) write(obgc_tr,'(i2)') m


       status = nf_put_att_text(ncid, ofbgc_id(m), "long_name", 20, 
     &     trname(m) //"flux " // obgc_tr )
       if (status /= nf_noerr) stop "netCDF error in obgc_write"
       status = nf_put_att_double(ncid, ofbgc_id(m), "missing_value", 
     &     nf_double, 1, missing_value)
       if (status /= nf_noerr) stop "netCDF error in obgc_write"
       status = nf_put_att_double(ncid, ofbgc_id(m), "_FillValue", 
     &     nf_double, 1, missing_value)
       if (status /= nf_noerr) stop "netCDF error in obgc_write"
      enddo


      status = nf_def_var(ncid, "kmt", nf_int, 2, (/ imtid, jmtid /),
     &                    kmtid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not define variable"
        write (*, *)
        write (*, *) "***  File     =  ", file
        write (*, *) "***  Variable =  kmt"
        write (*, *)
        stop
      end if

c...  Put global attributes
      status = nf_put_att_text(ncid, nf_global, "version", 10, version)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not put attribute"
        write (*, *)
        write (*, *) "***  File      =  ", file
        write (*, *) "***  Attribute =  version"
        write (*, *)
        stop
      end if
      status = nf_put_att_text(ncid, nf_global, "runtype", 3, runtype)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not put attribute"
        write (*, *)
        write (*, *) "***  File      =  ", file
        write (*, *) "***  Attribute =  runtype"
        write (*, *)
        stop
      end if



c...  Exit define mode
	print*,itt,missing_value
      status = nf_enddef(ncid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not exit define mode"
        write (*, *)
        write (*, *) "***  File =  ", file
        write (*, *)
*        stop
      end if

c...  Write the timestep counter [ITT]
c      status = nf_put_var_int(ncid, ittid, itt)
      status = nf_put_var_int(ncid, ittid, int(ttsec/86400))
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not write data"
        write (*, *)
        write (*, *) "***  File     =  ", file
        write (*, *) "***  Variable =  itt"
        write (*, *)
        stop
      end if

c      status = nf_put_var_real(ncid, timid, tim0(1))
       status = nf_put_vara_real(ncid, timid, 
     &  (/1/), (/1/), tim0(1))
       if (status /= nf_noerr) stop "netCDF error in writing time"

      status = nf_put_var_real(ncid, lontsid, lonts(2:imt-1))
      if (status /= nf_noerr) stop "netCDF error in write_averages"

      status = nf_put_var_real(ncid, lattsid, latts(2:jmt-1))
      if (status /= nf_noerr) stop "netCDF error in write_averages"

      status = nf_put_var_real(ncid, ztsid, zts)
      if (status /= nf_noerr) stop "netCDF error in write_averages"

* rjm obgc
c...  Write the obgc tracers [obgc01]
      do m=1,nt
	write(obgc_tr,'(a5,i1)') "obgc0",m
	if (m.gt. 9) write(obgc_tr,'(a4,i2)') "obgc",m
	
      status =nf_put_vara_double(ncid, obgc_id(m),
     & (/1,1,1,1/), (/imt-2, jmt-2, km, 1/), 
     & ave_tr(2:imt-1, 2:jmt-1, :, m))
*      status =nf_put_var_double(ncid, 
*	1  obgc_id(m),ave_tr(2:imtm1,2:jmtm1,:,m))
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not write data"
        write (*, *)
        write (*, *) "***  File     =  ", file
        write (*, *) "***  Variable = ",obgc_tr
        write (*, *)
        stop
      end if

      enddo
      
c...  Write the obgc fluxes [bflx01]
	do m=1,nbio2d
	write(obgc_tr,'(a5,i1)') "bflx0",m
	if (m.gt. 9) write(obgc_tr,'(a4,i2)') "bflx",m
      status =nf_put_vara_double(ncid, ofbgc_id(m), 
     & (/1,1,1/), (/imt-2, jmt-2, 1/), 
     & ave_flux(2:imt-1, 2:jmt-1, m))
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not write data"
        write (*, *)
        write (*, *) "***  File     =  ", file
        write (*, *) "***  Variable = ",obgc_tr
        write (*, *)
        stop
      end if

      enddo
* rjm


c...  Write the number of vertical levels on the tracer grid [KMT]
      status = nf_put_var_int(ncid, kmtid, kmt(2:imt-1,2:jmt-1))
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not write data"
        write (*, *)
        write (*, *) "***  File     =  ", file
        write (*, *) "***  Variable =  kmt"
        write (*, *)
        stop
      end if

c...  Close netCDF file
      status = nf_close(ncid)
      if (status .ne. nf_noerr) then
        write (*, *)
        write (*, *) "***  netCDF error: Could not close file ", file
        write (*, *)
        stop
      end if

      return
      end subroutine
