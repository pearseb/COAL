#if defined dmr_cfc && !defined dmr_oline 
* **NO CODE TO COMPILE FOR CFC RUNS

#else


c  These routines are required to run the BGC module 
c  To compile, first apply preprocessing
c
c 25-11-2015 PJB
c   general aesthetic clean of the code
c
c 
c
c
c
c


c=====================================================================c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c.....................................................................c

      subroutine bio_i 

c subroutine "bio_i" does the following:
c
c 1. reads in the BGC model arrays/variables defined in bio.h
c             the ocean model arrays/variables contained in obgc.h
c 2. reads namelist variables defined in "input" file
c 3. defines a number of initial values 
c       - these may be overwriten by the values provided in
c         the "input" file
c 4. Sets air-sea flux algorithms for different tracers with "igas"
c       - igas == 1     Oxygen
c       - igas == 2     Carbon Dixoide
c       - igas == 3     F12
c       - igas == 4     F11
c       - igas == 5     Carbon 13
c       - igas == 6     Carbon 14 
c       - igas == 7     Nitrous Oxide
c
c
c
c
c......................................................................c

*   INITIALISE THE VARIABLES OF THE BIOGEOCHEMCIAL MODEL

      include "obgc.h"
      include "extra.h"
      include "bio.h"

      parameter (ntmaxp1 = nbio2d)          ! ntmaxp1 is...
      character *12 trc_name(ntmaxp1)        
      
      ! reads variables stated in the input file on model run initiation
      namelist /bgc_names/ p_k, s_npp, n_k,
     + ratio_pop, pwl_pop,
     + rain_ratio, ratio_pic, pwl_pic, terr_input,
     + pmodel, temp, time, xmixl, pcon, pwr_sat,
     + tr_off, 
     + igas,
     + n_pho, n_alk, n_dic, n_c14, n_si, n_oxy, n_c13, n_fe,
     + n_no3, n_n15, n_tou, n_age, n_tomz, n_n2o,
     + trc_name,
     + idump, jdump, kdump, xdump, pdump,
     + pwl_opal, ratio_opal,
     + geo_seq,
     + tglobal, ivredc, ivredo, ivredpic,
     + ipic, NO3reset, deN, fix, 
     + sedfluxes, Bohlen2012, DenFactor,
     + vary_stoich, biomol, solarcarb,
     + Den_limit, Den_type,
     + NO3diagnostics, Fe_kd, p_kd, s_npp_fix,
     + MichaelisMenton, OptimalUptake,
     + ReminRelax, ReminTemp, ReminPico, ReminDiagnostics,
     + pN2O, N2Otemp, N2Odepth,
     + omz_min, omz_mean, omz_max,
     + N15diagnostics, latj, loni,
     + Eass, Erem, Efix, Eatm, Epden, Esden,
     + vary_frac13C
     
      ! Set default initial values for BGC model prior to reading input file
      data pwl_pop /-.836/
      data pwl_pic /-2./
      data pwl_opal /12e3/  ! 12 km
      data pwr_sat /0./
      data temp,time,xmixl,trad,pcon /24.,76.,50.,0.,0./
      data geo_seq /ntmax*0/
      data ivredc /0/
      data ivredo /0/, ipic /0/, ivredpic /0/
      
      ! Define the lowest possible value for nutrients in the model 
      data c0 /0./
      
      ! Nfixation is off before reading namelist
      data fixswitch /0./
      
      ! Tracer names
      data trc_name /ntmaxp1*' '/
      print*, trc_name,ntmaxp1
      data ratio_opal /ntmax*0./, 
     +     ratio_pop /ntmax*0./, ratio_pic /ntmax*0./
      data tglobal /ntmax*1./
      
      ! Is silicic acid simulated by the BGC model?
      if (n_si .ne.0 ) then
          ratio_opal(n_si)=10.
      endif

      ! Read the input file
      read  (5, bgc_names)
      write (6, bgc_names)
      
      do n=1,nt
         if (trc_name(n) .ne. ' ') then
             trname(n)=trc_name(n)
         endif
      enddo

      trname(1) = "Temperature"
      trname(2) = "Salinity"
      if (n_oxy.ne.0) then
          trname(n_oxy)="Oxygen"
          igas(n_oxy-2)=1
      endif
      if (n_pho.ne.0) then
          trname(n_pho)="Phosphate"
          igas(n_pho-2)=0
      endif
      if (n_dic.ne.0) then
          trname(n_dic)="DIC"
          igas(n_dic-2)=2
      endif
      if (n_alk.ne.0) then
          trname(n_alk)="Alk"
          igas(n_alk-2)=0
      endif
      if (n_c13.ne.0) then
          trname(n_c13)="C13"
          igas(n_c13-2)=5
      endif
      if (n_c14.ne.0) then 
          trname(n_c14)="C14"
          igas(n_c14-2) =6 
      endif
      if (n_si.ne.0) then
          trname(n_si)="Silicate"
          igas(n_si-2)=0
      endif
      if (n_fe.ne.0) then
          trname(n_fe)="Iron"
          igas(n_fe-2)=0
      endif
      if (n_no3.ne.0) then
          trname(n_no3)="Nitrate"
          igas(n_no3-2)=0
      endif
      if (n_n15.ne.0) then
          trname(n_n15)="Nitrogen15"
          igas(n_n15-2)=0
      endif
      if (n_tou.ne.0) then
          trname(n_tou)="True OU"
          igas(n_tou-2)=1
      endif
      if (n_age.ne.0) then
          trname(n_age)="Ideal Age"
          igas(n_age-2)=0
      endif
      if (n_tomz.ne.0) then
          trname(n_tomz)="Age of OMZ"
          igas(n_tomz-2)=0
      endif
         
      if (n_n2o.ne.0) then
          trname(n_n2o)="NitrousOxide"
          igas(n_n2o-2)=7
      endif

      print*, "OBGC: Tracer names = ",trname
      print*, "OBGC: gas indexes = ",igas

        ntr_req = max(n_oxy,n_dic,n_c13,n_c14,n_alk,n_pho,n_si,
     +                n_fe,n_no3,n_n15,n_tou,n_age,n_tomz,n_n2o)
      if (nt.ne. ntr_req) then 
          print *,"OBGC: nt does not equal number of requested tracers"
          print*,"nt = ",nt,"  ntr_req = ",ntr_req
          stop
      endif


#ifdef rjm_co2_dumping
      write(6,*) 'CO2 dumping site',xt(idump),yt(jdump),zt(kdump),
     +           ' Amount (GT/yr)',xdump
      xdump = xdump*1e9*1e15/3.73248e8    ! convert to pmol/s
#endif

#ifdef rjm_geo_seq
      gCtppm = 0.48
      write(6,*) 'Prescribe geological sequestration',geo_seq
      do l=1,nt
         geo_seq(l) =geo_seq(l)/(365.*24.*3600)  ! GtC/yr to GtC/sec
         ttflux(l)=0.
      enddo
#endif

      write(6,*) 'Phosphate addition in the southern subtropics',pdump


*   INITIALISE PARTICULATE ORGANIC PHOSPHATE REMINERALISATION FUNCTIONS - for pop and pic 
      
      zpop=1e-4     ! 1/10000cm or 1/100m
      zpic=1e+2     ! m to cm

      fmin_pop(1)=1.            ! fraction of organic matter conserved at surface
      fmin_pop(km)=0            ! fraction of organic matter conserved at ocean bottom
      fmin_pic(1)=1.            ! fraction of inorganic carbon conserved at surface
      fmin_pic(km)=0.           ! fraction of inorganic carbon conserved at ocean bottom
      i_pop=4 !2   !not used
      i_pic=12 !6

*   INITIALISE OPAL REMINERALISATION

      fmin_opal(1)=1.
      fmin_opal(km)=0.
      i_opal=12     ! minimum depth to start remineralization

*   CALCULATE THE POWER LAW FUNCTIONS FOR REMINERALISATION
      do k=1,km-1
        dizt(k) = 1./dzt(k) 
         dz_t=dzt(k)*.5
         fmin_pop(k)=min(1.0, ( (zt(k)+dz_t)*zpop )** pwl_pop )
         fmin_pic(k)=min(1.0,  exp( -(zt(k)+dz_t)/(zpic*pwl_pic)) )
         fmin_opal(k)=min(1.0,  exp( -(zt(k)+dz_t)/(zpic*pwl_opal)) )
      enddo

      fmin_pop(km)=0.      ! fraction of organic matter conserved at ocean bottom (km)
      fmin_pic(km)=0.      ! fraction of inorganic carbon conserved at ocean bottom (km)
      dizt(km) = 1./dzt(km)
      print*,'Depth in centimeters ',zt
      print*,'Fmin: particulate organic phosphate ',fmin_pop
      print*,'Fmin: particulate inorganic carbon ',fmin_pic
      print*,'Fmin: opal',fmin_opal

*   INITIALISE SEDIMENTS AND AIR-SEA FLUXES TO ZERO
      do j=1,jmt
         do i=1,imt
            sediments(i,j)=c0
            do n=1,nt-2
               fluxgas(i,j,n)=c0
            enddo
        enddo
      enddo

      if (n_n15.ne.0) then 
         print*, " "
         print*, " "
         print*, "NITROGEN ISOTOPE FRACTIONATION FACTORS "
         print*, " "
         print*, " ASSIMILATION = ", Eass, "per mil"
         print*, " REMINERALISATION = ", Erem, "per mil"
         print*, " N2 FIXATION = ", Efix, "per mil"
         print*, " AEOLIAN DEPOSITION = ", Eatm, "per mil"
         print*, " PELAGIC DENITRIFICATION = ", Epden, "per mil"
         print*, " SEDIMENT DENITRIFICATION = ", Esden, "per mil"
         print*, " "
         print*, " "
      endif

c SBC for the BGC module come from atmosphere
*   READ SEASONAL FORCINGS AT SURFACE OCEAN FOR BGC MODEL
*       - windspeed squared
*       - shortwave radiation
*       - surface pressure
* need windspeed, shortwave radiation and surface pressure
      call nread_ocmip
      print*,' '
      print*,' '
      
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c




c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine obgc_atmco2 (atmco2)


c get the co2 from rrvco2 (RADISW.f) for coupled run
c requires this interface to get access to rrvco2 without messing up 
c ocean code
c......................................................................c

      include "PARAMS.f"
      include "RDPARM.f"
      include "RADISW.f"    ! holds the atmospheric co2 variable

      atmco2 = rrvco2 *1e6   !ppm units
 
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc      
c======================================================================c










c======================================================================c      
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      
c......................................................................c

      subroutine bio_geo_chem (j, n, EPmax)

* The ocean bgc module
c
c
c     input:
c       joff = offset relating "j" in the MW to latitude "jrow"
c       js   = starting row in the MW
c       je   = ending row in the MW
c       is   = starting longitude index in the MW
c       ie   = ending longitude index in the MW
c
c    primary author:  r.j.matear  
c                     richard.matear@ml.csiro.au
c
c    secondary author: p.j.buchanan
c                      pearse.buchanan@utas.edu.au
c
c            -  Nitrogen cycle (no3, d15n)
c            -  Sedimentary chemistry
c      
c 	The matrix source will hold the source and sink terms derived 
c   from the the biogeochemical model
c
c   The bio_geo_chem subroutine does the following:
c
c       0. Calculate carbon chemistry terms
c       1. Biological uptake 
c       2. Biological remineralization
c       3. Check Oxygen and sediments 
c       4. Air-sea exchange
c
c   Setup for the following tracer order
c   O2, PO4, CO2
c
c......................................................................c

      
      include "obgc.h"
      include "extra.h"
      include "bio.h"
      include "OCEAN_NML.f"
      include "SCALAR.f"
      
      !	 include "co2.h"
      include "FEWFLAGS.f"  ! logical flags of which lcouple is used here

      parameter (istrt=2, iend=imt-1)
      save pbtime,itimes,sum1,sum2,sum3,sum4

      data pbtime,itimes /0.,-1/
      c0=0.

* Index to use for biology
      ibdt=taum1

      if (n.eq.3 .and. j.eq.2) then
         itimes = itimes+1
      endif
      if (n.eq.3) then
         call tx_growth(j)
      endif

      ! rjm Needs to be fixed to do c14

c C14 Tracer
      if (n.eq. n_c14) then
         c14_atm=1e2
         c14_lambda = -3.88921e-12
         c14_gamma = 3.215e-7/dzt(1)*1e2
         
         do i=istrt,iend
            source(i,1) = (c14_atm - tb(i,1,n) )*c14_gamma
            fluxgas(i,j,n-2) = source(i,1)
         enddo
         do k=2,km
            do i=istrt,iend
               source(i,k) = c14_lambda*tb(i,k,n)
            enddo
         enddo
         return
      endif

c --------------------------------------------

c Oxygen Tracer
      ! do some extra stuff on the first bgc tracer

      if (n.eq.3) then

* Modify pCO2 and C13 in atmosphere
      
      ! compute year of integration 
         ttt = itt/float(knitd*365)
         
         if (j.eq.2) then 
            pco2a=co2_history(ttt)

      ! get the co2 from rrvco2 (RADISW.f) for coupled run
            if (lcouple) then
               call obgc_atmco2(pco2a)
            endif
            
      ! if pco2a < 280 set the fc13a using pco2 of 280.
            fc13a = 0.011164382 - 2.0225714e-7*max(0.,(pco2a-280.) ) 

#ifdef dmr_atm_box
            fc13a=rc_atm(pco2a)
#endif

            print *,'Timestep number =',itt,'   Year =',ttt,
     +              '   Timesteps per day =',knitd
            print *,'Atmospheric CO2 =',pco2a,'d13C frac =',fc13a

         endif

         tott = ttt   ! start the total time from 2004

* Compute carbon chemistry terms if dic tracer is used
         if (n_dic .gt. 0 ) then  ! start
            do i = istrt,iend 
               if (fm(i,1) .ne. 0) then

                  temp=tb(i,1,1)
                  saln=(tb(i,1,2)+.035)*1e3

                  if (n_alk .le. 0) then
                     alk = 2377  ! 2431 old value
                  else
                     alk = tb(i,1,n_alk) 
                  endif
              
                  tdic = tb(i,1,n_dic) 

* only updated every ITIMES time-step
                  if (mod(itimes,5) .eq. 0) then
* Use modified ocmip chemistry to determine co2 parameters
* The original ocmip code wants to calculate the co2 flux but
* I will do this calculation later because it is more efficient
* when consider multiple dic tracers (i.e. dic and c-13)
                     tdicp = tdic
                     alkp = alk
                     if (n_pho.ne.0 ) then
                        po4 = max(tb(i,1,n_pho),0.)
                     endif
                     si = max(silicate(i,j),0.)
      ! rjm set to zero but since but could be changed 
                     po4 = 0
                     si = 0
                     atmpres = 1.
                     atmco2_t = pco2a

                     xco2 = atmco2_t
                     phlo = 1.0
                     phhi = 13.0
                     pp = 0

                     call co2calc1(temp,saln,tdicp,alkp,po4,si,
     +                    phlo,phhi,ph,xco2,atmpres,co2star,
     +                    dco2star, omegaar1,omegaca1,co3,fco2,pp,ff)

* store the carbon parameters for later use
                     pco2o(i,j,n_dic-2) = fco2
                     omegaar(i,j) = omegaar1
                     omegaca(i,j) = omegaca1
                     co2sol(i,j) = ff

                  endif  ! test for itimes

!gasx from Wannikof 1992 in cm/s where sbcbio(i,j,1) is wind speed squared (m/s)^2
                  x_co2(i,j) = sqrt(660.) * 0.39 * sbcbio(i,j,1) /
     +                         schmidt_no(2,temp)**.5 *  co2sol(i,j)
     +                         *2.7777778e-4

                  
                  !print*,'rjm',i,j,omegaar(i,j),pco2o(i,j,n_dic-2)

               endif  ! masks
            enddo  ! i - loop
         endif  ! end n_dic if statement
*  ******* end carbon chemistry *********
!	print*,'rjm0',j,n



         
**************************************************
* ****  STEP 2 -->  COMPUTE NEW PRODUCTION  **** *
**************************************************
         
*       Units are mmol/m3/s  cm
*       = 1e-2 mmol/m2/s

         
         do i=istrt,iend
         if (kmt(i,j).gt.0) then
       
*   2.1.  --  Calculate the C:H:O:N:P stoichiometries of organic matter
            
            if (vary_stoich) then
               call stoich(i,j, max(0.0,tb(i,1,n_pho)), 
     +                          max(0.0,tb(i,1,n_no3)) )  ! see Galbraith & Martiny 2015
            else
               carb2P(i,j) = 106
               NtoP(i,j) = 16
               
               ! Implicit assumption that all organic matter is carbohydrate
               HtoP(i,j) = 2.0*carb2P(i,j) + 3.0*NtoP(i,j) + 3.0
               OtoP(i,j) = carb2P(i,j) + 4.0

               ! Calculate O2 and NO3 demand for oxic and suboxic remineralisation
               !    Both assume "complete" remineralisation, whereby
               !    organics are converted instantly to end products
               !    PO4, CO2 and NO3
            endif
            o2_rem(i,j) = -(carb2P(i,j) + 0.25*HtoP(i,j) - 
     +                      0.50*OtoP(i,j) - 0.75*NtoP(i,j) + 1.25)
     +                      - 2.0*NtoP(i,j)
               
            no3_rem(i,j) = -(0.8 * (carb2P(i,j) + 0.25*HtoP(i,j) - 
     +                      0.50*OtoP(i,j) - 0.75*NtoP(i,j) + 1.25)
     +                      + 0.6*NtoP(i,j) )
            
            ! Calculate fractionation of c13
            if (vary_frac13C) then ! uses growth rate and [CO2]aq (Laws et al., 1995, Geo. et Cos. Acta)
               c13toc(i,j) = carb2P(i,j) * min(0.985, max(0.97,
     +                       (1.0 - ((0.371 -
     +                       (Vmax(i,j)*86400.0/
     +                       (pco2o(i,j,n_dic-2)*co2sol(i,j))
     +                       ))/0.015)*1e-3) ))
            else
               c13toc(i,j) = carb2P(i,j)*103.8/106.0
            endif
            
            ! read in phosphate concentrations
            if (n_pho.gt.0) then
               phs = tb(i,1,n_pho) !phosphate at the surface  
            else
               phs = c0
            endif
            if (phs .le. 0.02) phs=c0
         
            ! read in nitrate concentrations 
            if (n_no3.gt.0) then
               no3 = max(0.0, tb(i,1,n_no3))
            else
               no3 = c0
            endif

            
            
            if (fix) then
*********************************************
***   2.2  --  BEGIN NITROGEN FIXATION    ***

*   2.21  --  Determine oxygen and nitrate consumption of Nfixer OM            
               CP_fix = 331.0 !Karl & Letelier 2008 MEPS
               NP_fix = 50.0  ! Mills & Arrigo (2010) Nature Geoscience
               HP_fix = 2.0*CP_fix + 3.0*NP_fix + 3.0
               OP_fix = CP_fix + 4.0
               
               o2_rem_f = -(CP_fix + 0.25*HP_fix - 
     +                         0.50*OP_fix - 0.75*NP_fix + 1.25)
     +                         - 2.0*NP_fix     ! -431 O2:P
               no3_rem_f = -(0.8 * (CP_fix + 0.25*HP_fix - 
     +                         0.50*OP_fix - 0.75*NP_fix + 1.25)
     +                         + 0.6*NP_fix )   ! -294.8 NO3:P
                    

*   2.23  --  Calculate temperature limitation (0-1)
               temp = tb(i,1,1)
               Fmax = max(0.005,  ( (-0.0042 * temp**2.0) +
     +                   (0.2253 * temp) - 2.7819 ) ) !from Kreist2015
                
*   2.24  --  Calculate nutrient limitation
               if (n_fe.gt.0) then
                  dFe = tb(i,1,n_fe)
                  R_fix(i,j) = min(exp(-no3), max(0.,tanh(2*dFe-Fe_kd)))
               else
                  R_fix(i,j) = min(exp(-no3),(phs_fix/(phs_fix+p_kd)) )
               endif

                  
*   2.25  --  Calculate PONfix production and its remineralisation

               pop_fix(i,1,j) = s_npp_fix*Fmax*dzt(1)*R_fix(i,j)
     +                          *(1.-sbcbio(i,j,3))*(1./86400.)
               
         
               do k = 2,kmt(i,j)-1
                  pop_fix(i,k,j) = -pop_fix(i,1,j)*
     +                             (fmin_pop(k-1)-fmin_pop(k) )
               enddo
                  
               pop_fix(i,kmt(i,j),j) = -pop_fix(i,1,j)*
     +                              (fmin_pop(kmt(i,j)-1)-fmin_pop(km))
     +                                 - sediments(i,j)      
        
*   2.27  --  Determine percentage of available phosphate for phytoplankton            

*               if (k.eq.1 .and.
*     +            phs.gt.0.0 .and. pop_fix(i,1,j).gt.0.0) then
*                  print*, "PO4 before = ", phs
*                  phs = (1.0 - max(0., min(1., 
*     +                  (pop_fix(i,1,j)*dizt(1)*86400.)/phs )))*phs
*                  print*, "PO4 after = ", phs
*               endif

            endif

***   2.2  --  END NITROGEN FIXATION    ***
*******************************************
          


*   2.3  --  Calculate Export Production (Particulate Organic Phosphate)            

     
            if (MichaelisMenton) then
               if (n_fe.gt.0 .and. n_no3.gt.0) then 
                  dfe = max(tb(i,1,n_fe),0.)
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                         min( phs/(phs+p_k), dfe/(dfe+.1),
     +                              no3/(no3+n_k), 
     +                              fpgr_temp(i,j) )
        
               elseif (n_fe.gt.0 .and. n_no3.eq.0) then
                  dfe = max(tb(i,1,n_fe),0.)
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                         min( phs/(phs+p_k), dfe/(dfe+.1),
     +                              fpgr_temp(i,j) )
               
               elseif (n_fe.eq.0 .and. n_no3.gt.0) then 
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                         min( phs/(phs+p_k),
     +                              no3/(no3+n_k), 
     +                              fpgr_temp(i,j) )
               
               else
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                         min( phs /(phs+p_k), 
     +                              fpgr_temp(i,j) )
               
               endif
            endif


            
            if (OptimalUptake) then

               phs = max(1e-10, phs) !phosphate at the surface  
               no3 = max(1e-10, no3) !nitrate at the surface  
               temp = tb(i,1,1)
               
               fa = max( (1.+(no3/0.187)**0.5)**(-1.), 
     +                   (1.+((phs*NtoP(i,j))/0.187)**0.5)**(-1.)  )
             
               if (NtoP(i,j).gt.0.0) then 
                  Pou = phs/( (phs/(1.-fa)) + (0.187/(NtoP(i,j)*fa)) ) 
                  Nou = no3/( (no3/(1.-fa)) + (0.187/fa) )
               else
                  Pou = 0.0 
                  Nou = 0.0 
               endif
              
               if (n_fe.gt.0 .and. n_no3.gt.0) then 
                  dfe = max(tb(i,1,n_fe),0.)
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                       min(Pou,Nou,dfe/(dfe+Fe_kd),fpgr_temp(i,j))
        
               elseif (n_fe.gt.0 .and. n_no3.eq.0) then
                  dfe = max(tb(i,1,n_fe),0.)
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                         min(Pou, dfe/(dfe+Fe_kd), fpgr_temp(i,j))
               
               elseif (n_fe.eq.0 .and. n_no3.gt.0) then 
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                         min( Pou, Nou, fpgr_temp(i,j) )
               
               else
                  pop(i,1,j) = s_npp*vmax(i,j)*dzt(1)* 
     +                         min( Pou, fpgr_temp(i,j) )
               
               endif
            endif 

            
*   2.4  --  Ensure that pop can only remove what is available
            
            if (pop(i,1,j).gt.0.0) then
               ! 1. check if enough PO4 is available (convert to mmol PO4 m-3 per timestep) 
               pop(i,1,j) = min(1.0,
     +                     (phs/(pop(i,1,j)*dizt(1)*1e-2*c2dtts)) )
     +                      * pop(i,1,j)
               ! 2. check if enough NO3 is available
               if (n_no3.gt.0) then
                  pop(i,1,j) = min(1.0, max(0., ( 
     +                         (tb(i,1,n_no3)-0.1) / (pop(i,1,j)*1e-2*
     +                         dizt(1)*c2dtts*NtoP(i,j)) ) ))*pop(i,1,j)
               endif
            endif

            
*   2.5  --  Determine a measure of C:P based on variable pCO2 concentrations
            
            if (ivredc.eq.0) then
               vredf = 1.
            endif
            if (ivredc.eq.1) then 
               vredf= (1. + (pco2o(i,j,n_dic-2) - 280.)*2./700./6.6)
            endif
            if (ivredc.eq.2) then
               vredf= (1. + (pco2a - 280.)*2./700./6.6)
            endif


*   2.6  --  COMPUTE POC and PON FROM POP 
         !Note poc is not used in source equation only in pic scaling below
            poc(i,1,j) = pop(i,1,j)*carb2P(i,j)*vredf  

*   2.7  --  COMPUTE CaCO3 SHELL PRODUCTION AS A CONSTANT VALUE OF POP
            if (ivredpic .eq.1) then
               pic(i,1,j) = rain_ratio*poc(i,1,j)
            endif
            if (ivredpic .eq.0) then 
               pic(i,1,j) = rain_ratio*pop(i,1,j)*carb2P(i,j)
            endif


*   2.8  --  CALCULATE CaCO3 PRODUCTION SCALING DEPENDENT ON omegaca
            if (ipic.ge.1) then
               if (omegaca(i,j).gt.1) then
                  var_satst(i,j) = (omegaca(i,j)-1)**pwr_sat
               else
                  var_satst(i,j) = 0  !no pic export
               endif  !end test for omega

               ! scaled based on poc which includes the vred term !
               if (ivredpic.eq.1) then
                  pic(i,1,j) = var_satst(i,j)*rain_ratio*poc(i,1,j)
               endif
  
               ! scaled based on pop with constant c/p 
               if (ivredpic .eq. 0) then
                  pic(i,1,j) = var_satst(i,j)*rain_ratio*pop(i,1,j)*
     +                         carb2P(i,j)
               endif
            endif ! end omegaca dependency


*   2.9  --  COMPUTE THE OPAL PRODUCTION
            if (n_si.ne.0) then
               opal(i,1,j) = pop(i,1,j)*tb(i,1,n_si)/(tb(i,1,n_si)+4)
            endif

         endif
         enddo  ! end looping over the ith dimension (longitude)

* ****  END STEP 2  **** *
         

**********************************************************************
* ****  STEP 3 -->  COMPUTE REMINERALISATION OF ORGANIC MATTER **** **
*                       - specifically: POP, PIC, OPAL               *
**********************************************************************
         
         if (ReminTemp) then
*   3.1  --  Apply temperature dependence to exponent (Marsay 2015 PNAS)
            
         do i=istrt,iend
         if (kmt(i,j).ne.0) then

            if (kmt(i,j).ne.0) then
            ! find depth interval over which temp will be averaged
            dep = 0.0
            do k=1,9
               dep = dep + dzt(k)
            enddo
            ! find average temperature over mesopelagic zone
            temp = 0.0
            do k=1,9
               temp = temp + tb(i,k,1)*(dzt(k)/dep)
            enddo

            ! apply temp-dependence to power law exponent
            Mcurve_b(i,j) = max(0.6, 0.062*temp + 0.303)*(-1.)
            
            ! recalculate the Martin Curve
            do k=1,km-1
               fmin_pop(k) = min(1.0, ((zt(k)+dzt(k)*0.5)*1e-4)
     +                                  **Mcurve_b(i,j))
            enddo
            fmin_pop(km) = 0.0
            endif
         
         endif
         enddo

         endif


         if (ReminPico) then
*   3.2  --  Apply picoplankton dependence to exponent
            
            if (EPmax.gt.0.0) then
               do i=istrt,iend
               if (kmt(i,j).ne.0) then
                  
                  if (kmt(i,j).ne.0) then
                  ! find export production
                  EP(i,j) = poc(i,1,j) * (1e-2*12.0*(c2dtts/2.0)) /
     +                      ((c2dtts/2.0)/3600.0)
               
                  ! find fraction of picoplankton based on export production
                  Fpico = 0.51 - 0.26*(EP(i,j)/(EP(i,j) + EPmax/2.0)) 
              
                  ! find transfer efficiency
                  Teff = 0.47 - 0.81*Fpico 
            
                  ! find b exponent
                  Mcurve_b(i,j) = log(Teff)/log(10.0)
            
                  ! recalculate the Martin Curve
                  do k=1,km-1
                     fmin_pop(k) = min(1.0, ((zt(k)+dzt(k)*0.5)*1e-4)
     +                                        **Mcurve_b(i,j))
                  enddo
                  fmin_pop(km) = 0.0
                  endif

               endif
               enddo
            endif

         endif
            
         
*   3.1  --  COMPUTE REMINERALISATION OF POP, PIC, OPAL
         do i=istrt,iend
         if (kmt(i,j).ne.0) then
            do k=2,kmt(i,j)-1
               pop(i,k,j) = -pop(i,1,j)*
     +                      (fmin_pop(k-1)-fmin_pop(k) )
               pic(i,k,j) = -pic(i,1,j) *
     +                      (fmin_pic(k-1) - fmin_pic(k) )

               if (n_si.ne.0) then
                  opal(i,k,j) = -opal(i,1,j)*
     +                          (fmin_opal(k-1) - fmin_opal(k) )
               endif
          
            enddo

*   3.2  --  REMINERALISE ALL REMAINING ORGANIC MATTER AT OCEAN BOTTOM
         
            pop(i,kmt(i,j),j) = -pop(i,1,j)*
     +                          (fmin_pop(kmt(i,j)-1)-fmin_pop(km) )
     +                          - sediments(i,j)

            sediments(i,j)=0.
         
            pic(i,kmt(i,j),j) = -pic(i,1,j) *
     +                          (fmin_pic(kmt(i,j)-1) - fmin_pic(km) )

            if (n_si.ne.0) then
               opal(i,kmt(i,j),j) = -opal(i,1,j)*
     +         (fmin_opal(kmt(i,j)-1) - fmin_opal(km) )
            endif

         endif
         enddo
      
      endif  ! end calculations on first tracer

* ****  END STEP 3  **** *


      
********************************************************
* ****  STEP 4 -->  COMPUTE AIR-SEA GAS EXCHANGE  **** *
********************************************************

*   4.1  --  Oxygen
      if (n.eq.n_oxy) then    !setup for oxygen but the code can do other gases
         ng = igas(n-2)

         do i = istrt,iend
            if (kmt(i,j).ne.0) then 
         
               ! Units are 1e-2 mmol/m2/s
               temp = tb(i,1,1)
               saln = (tb(i,1,2)+.035)*1e3

               oxs = tb(i,1,n)+tr_off(n)
               oxa = gas_sat(temp,saln,ng) 

               ! gas flux from Wannikof 1992 in cm/s where sbcbio(i,j,1) is wind speed squared (m/s)^2
               x_flux = sqrt(660.) * 0.39 *sbcbio(i,j,1)/
     +                  schmidt_no(ng,temp)**.5
     +                  *2.7777778e-4
             
               fluxgas(i,j,n-2) = x_flux*(oxa-oxs)

            endif
         enddo

      else

*   4.2  --  Phosphate
         if (n.eq.n_pho) then
            do i = istrt,iend
               fluxgas(i,j,n-2) = terr_input
               ! phosphate fertilization
               rtd = 180./3.14159
               spy = 365.*3600*24
               yy = phit(j)*rtd
               if (yy.ge.-50 .and. yy.le.-20 .and. fm(i,1).ne.0) then
                  fluxgas(i,j,n-2) = fluxgas(i,j,n-2) + pdump / spy 
               endif
            enddo
         endif

*   4.3  --  Nitrate         
         if (n.eq.n_no3) then
            do i = istrt,iend
               fluxgas(i,j,n-2) = sbcbio(i,j,5)
            enddo
         endif

*   4.4  --  Nitrogen 15          
         if (n.eq.n_n15) then
            do i = istrt,iend
               fluxgas(i,j,n-2) = (1.-(1./(1. + Eatm*1e-3 + 1.)))
     +                             *sbcbio(i,j,5)
            enddo
         endif

         
*   4.5  --  Alkalinity         
         if (n.eq.n_alk) then
            do i = istrt,iend
               fluxgas(i,j,n-2) = (-terr_input*16 - sbcbio(i,j,5))
            enddo
         endif

*   4.6  --  Iron         
         if (n.eq.n_fe) then
            do i = istrt,iend
               fluxgas(i,j,n-2) = sbcbio(i,j,4) 
            enddo
         endif

*   4.7  -- True Oxygen Utilisation         
         if (n.eq.n_tou) then    !setup for oxygen 
            ng = igas(n-2)

            do i = istrt,iend
               if (fm(i,1).gt.0) then 
         
                  ! Units are 1e-2 mmol/m2/s
                  temp = tb(i,1,1)
                  saln = (tb(i,1,2)+.035)*1e3

                  oxs = tb(i,1,n)+tr_off(n)
                  oxa = gas_sat(temp,saln,ng) 

               ! gas flux from Wannikof 1992 in cm/s where sbcbio(i,j,1) is wind speed squared (m/s)^2
                  x_flux = sqrt(660.) * 0.39 *sbcbio(i,j,1)/
     +                     schmidt_no(ng,temp)**.5
     +                     *2.7777778e-4
             
                  fluxgas(i,j,n-2) = x_flux*(oxa-oxs)

               endif
            enddo
         endif

*   4.8  --  Age Tracers         
         if (n.eq.n_age) then
            do i = istrt,iend
               fluxgas(i,j,n-2) = 0.0 
            enddo
         endif
         if (n.eq.n_tomz) then
            do i = istrt,iend
               fluxgas(i,j,n-2) = 0.0 
            enddo
         endif

*   4.9  --  Nitrous Oxide         
         if (n.eq.n_n2o) then
            do i = istrt,iend
               if (fm(i,1).ne.0) then   ! Only calculate for ocean points
                  temp = tb(i,1,1)
                  saln = max(0., (tb(i,1,2)+.035)*1e3)
                  
                  !1. Calculate Gas transfer velocity (Kw)
                  x_N2O(i,j) = sqrt(660.) * 0.39 * sbcbio(i,j,1) /
     +                         schmidt_no(igas(n-2),temp)**.5 
     +                         *2.7777778e-4 !cm/hr --> cm/s

                  !2. Get surface water concentration (umol/m3)
                  N2Oo = tb(i,1,n)
                 
                  !3. Calculate N2O concentration in moist air (mmol/m3)
                  N2Oa = pN2O * 1e-9 ! convert from ppbv (natm) to atm
     +                   * gas_sat(temp,saln,igas(n-2))
                  
                  fluxgas(i,j,n-2) = x_N2O(i,j)*(N2Oa - N2Oo)
                  
               endif
            enddo
         endif
         
*   4.10  --  Dissolved Inorganic Carbon         
         ! For CO2 exchange the units are umol/l *cm/s  ==>  1e-2 mmol/m2/s
         if (n.eq.n_dic .or. n.eq.n_c13) then 
            do i = istrt,iend
         
               if (fm(i,1).ne.0) then   ! Only calculate for ocean points
                  temp = tb(i,1,1)
                  saln = max (0., (tb(i,1,2)+.035)*1e3)

                  if (n.eq.n_dic ) then

#ifdef rjm_stab
                     ! Prescribe the pco2a value to use
                     pco2a = geo_seq(n)  ! variable provided in namelist
                     ! case with maximum pco2a but with different growth rates
                     pco2a = min( 750.0, 377.85+(ttt+1780-2006)
     +                            *geo_seq(n) )
#endif

                     fluxgas(i,j,n-2) = x_co2(i,j)*
     +                                  (pco2a - pco2o(i,j,n-2) -
     +                                  dpco2a)
*                     print*, pco2a, pco2o(i,j,n-2), dpco2a

#ifdef rjm_vred_noaco2
                     fluxgas(i,j,n-2) = x_co2(i,j)*
     +                                  (280. - pco2o(i,j,n-2) - dpco2a)
#endif

                  endif ! end dic
         
*   4.11  --  C13 Exchange (must include CO2 exchange)
                  if (n.eq.n_c13 ) then
                  
                     ! cas=0.98940
                     ! csa=0.9984

                     ! Temperature Dependent fractionation
                     temk = 1./(temp+273.15)
                     cas = (-0.373*temk + 1.00019) *.9995
                     csa = (-9.866*temk + 1.02412) *.9995

                     fluxgas(i,j,n-2) =x_co2(i,j)*cas*pco2a*fc13a - 
     +                                 x_co2(i,j)*csa*pco2o(i,j,n_dic-2)
     +                                 *(tb(i,1,n)+tr_off(n)) / 
     +                                  (tb(i,1,n_dic)+tr_off(n_dic))
                    
                  endif  ! endif for c13  
               endif  ! endif fm>0

            enddo  ! end i loop
         endif  ! endif for carbon
      endif  ! endif airsea flux test
 
* ****  END STEP 4  **** *


******************************************************
* ****  STEP 5 -->  COMPUTE THE VIRTUAL FLUXES  **** *
******************************************************
      ! assumes fluxgas has been updated prior to the following
      ! for n_pho and n_alk the terrerial input set fluxgas

      do i = istrt,iend
         if (.not.lcouple) then
            if (kmt(i,j).ne.0) then 
            salf = flux(i,j,2) ! salf = change in salinity in top layer per second
            
               fluxgas(i,j,n-2) = fluxgas(i,j,n-2) + salf 
     +                            * tglobal(n) / 0.035 * dzt(1)
         
            endif
         else
            if (kmt(i,j).ne.0) then           
            salf = flux(i,j,2)! salf = change in salinity * rhow * dz(1) *0.01
            WMTOP = 1.  ! v1.2 fixes units  RHOW*DZ(1)*0.01
            
               fluxgas(i,j,n-2) = fluxgas(i,j,n-2) + salf 
     +                            * tglobal(n)/0.035*dzt(1)/wmtop
         
            endif
         endif
      enddo  
     
* ****  END STEP 5  **** *

      
*****************************************************************
* ****  STEP 6 --> COMPUTE OXIC & SUBOXIC REMINERALISATION **** *
*****************************************************************

      if (n.eq.n_oxy) then ! --> if biogeochemistry is on
      if (ReminRelax) then 
      
* -------------------------------------------------------------------- *
*                                                                      *
*   The following section of code ensures that where oxygen is         *
*   limiting, and denitrification cannot account for the reminer-      *
*   alisation of organic matter (OM), remineralisation is also         *
*   limited.                                                           *
*                                                                      *
*   Oxygen should therefore not removed past zero. OM is passed to     *
*   the next depth for consumption. If this cannot be achieved to      *
*   completion, then the remaining OM is passed on again until         *
*   either:                                                            *
*       - all OM can be remineralised                                  *
*       - the last depth is encounted (kmt(i,j)), where all OM is      *
*         remineralised                                                *
*                                                                      *
* -------------------------------------------------------------------- *

      do i = istrt,iend
      if (kmt(i,j).ne.0) then
         do k = 1,km
     
            op_tot(i,k,j) = pop(i,k,j)

            if (fix) op_tot_f(i,k,j) = pop_fix(i,k,j)
              
         enddo
      endif
      enddo


      do i = istrt,iend
      if (kmt(i,j).ne.0) then
         do k = 1,km
      
            oxy = max(0.0, tb(i,k,n_oxy))
      
            if (n_no3.gt.0 .and. deN) then

               no3 = max(0.0, tb(i,k,n_no3))

*   6.1  --  Using oxygen, calculate the strength of denitrification

               if (oxy.lt.Den_limit) then
                     
                  if (Den_type.eq."Linear ") then
                     R_den(i,k,j) = min(1., max(0.,
     +                              (Den_limit - oxy)/Den_limit ))
                  endif
                        
                  if (Den_type.eq."QuadPos") then
                     R_den(i,k,j) = min(1.0, max(0.0,
     +                             ( ((Den_limit - oxy)/
     +                                 Den_limit)**2. ) ) )
                  endif

                  if (Den_type.eq."QuadNeg") then
                     R_den(i,k,j) = min(1.0, max(0.0,
     +                             ( -(oxy/Den_limit)**2 + 1.0)))
                  endif
                    
                  if (Den_type.eq."Sigmoid") then
                     R_den(i,k,j) = min(1.0, max(0.0,
     +                             (1./(1.0 - exp(-Den_limit/2.0) +
     +                              exp(oxy-(Den_limit/2.)) )) ))
                  endif
                     
               else
                  R_den(i,k,j) = 0.0
               endif

          
*   6.2  --  To ensure that nitrate consumption slows as no3 becomes
*            less available, and therefore ensure that no3 never really
*            reaches zero in the ocean interior, introduce a linear
*            reduction in no3 as no3 < 10 uM
               if (no3.le.40.0 .and. R_den(i,k,j).gt.0.0) then
                  deNrelax = max(0.0, (-1.0 + 2.0*(no3/40.0)))
               else
                  deNrelax = 1.0
               endif
            
               if (deNrelax.lt.R_den(i,k,j)) then
                  R_den(i,k,j) = deNrelax
               endif

               
            else ! if deN is FALSE
               R_den(i,k,j) = 0.0
            endif

            
*   6.3  --  Calculate amount of pop to be remineralised by oxic and
*            suboxic (denitrification) remineralisation
 
            op_rem(i,k,j) = op_tot(i,k,j)*(1.0-R_den(i,k,j))
            op_den(i,k,j) = op_tot(i,k,j)*R_den(i,k,j)

            if (fix) then
               op_rem_f(i,k,j) = op_tot_f(i,k,j)*(1.0-R_den(i,k,j))
               op_den_f(i,k,j) = op_tot_f(i,k,j)*R_den(i,k,j)
            endif


*   6.4  --  Now, determine whether the organic matter allocated to
*            oxygen can in fact be remineralised by the oxygen that is 
*            available

            if (-op_rem(i,k,j).gt.0.0) then
               R_Olim(i,k,j) = min(1.0, max(0.0, ( (oxy-.5) / (
     +                         op_rem(i,k,j)*dizt(k)*1e-2*c2dtts*
     +                         o2_rem(i,j) ) )))
            else
               R_Olim(i,k,j) = 1.0    ! full oxic remineralisation possible of OM
            endif
 
            
*   6.5  --  Now, do the same for nitrate and denitrification

            if (-op_den(i,k,j).gt.0.0) then
               R_Nlim(i,k,j) = min(1.0, max(0.0, ( no3 / (
     +                         op_den(i,k,j)*dizt(k)*1e-2*c2dtts*
     +                         no3_rem(i,j) ) )))
            else
               R_Nlim(i,k,j) = 1.0    ! full suboxic remineralisation possible of OM
            endif
            
            
*   6.6  --  If R_Olim and R_Nlim are both 1.0, then no OM is required
*            to be passed to the next depth, and the total OM can be
*            simply calculated as...

            if (R_Olim(i,k,j).eq.1.0 .and. R_Nlim(i,k,j).eq.1.0) then
               op_tot(i,k,j) = op_rem(i,k,j) + op_den(i,k,j)

               ! If all OM from general phytoplankton can be remineralised, 
               ! then the OM from nitrogen fixers can now be calculated as...
            
               if (fix) then

                  oxy = max(0.0, tb(i,k,n_oxy))
                  no3 = max(0.0, tb(i,k,n_no3))
                 
                  oxy=oxy-op_rem(i,k,j)*dizt(k)*c2dtts*1e-2*o2_rem(i,j)
                  no3=no3-op_den(i,k,j)*dizt(k)*c2dtts*1e-2*no3_rem(i,j)
                  
                  if (-op_rem_f(i,k,j).gt.0.0) then
                     R_Olim_f(i,k,j) = min(1.0, max(0.0, ( 
     +                                 (oxy-0.5) / (op_rem_f(i,k,j)*
     +                                 dizt(k)*c2dtts*1e-2*o2_rem_f) )))
                  else
                     R_Olim_f(i,k,j) = 1.0    ! full oxic remineralisation possible of OM
                  endif
                  if (-op_den_f(i,k,j).gt.0.0) then
                     R_Nlim_f(i,k,j) = min(1.0, ( no3 / ( 
     +                                 op_den_f(i,k,j)*dizt(k)*
     +                                 c2dtts*1e-2*no3_rem_f  )))
                  else
                     R_Nlim_f(i,k,j) = 1.0    ! full suboxic remineralisation possible of OM
                  endif
            
                  if (R_Olim_f(i,k,j).eq.1.0 .and. 
     +                R_Nlim_f(i,k,j).eq.1.0) then
                      op_tot_f(i,k,j) = op_rem_f(i,k,j)+op_den_f(i,k,j)
                  else
                     if (k.lt.kmt(i,j)) then
                        !1
                        op_rem_f(i,k,j) =op_rem_f(i,k,j)*R_Olim_f(i,k,j)
                        op_den_f(i,k,j) =op_den_f(i,k,j)*R_Nlim_f(i,k,j)
                        !2
                        op_unrem_f(i,k,j) = op_tot_f(i,k,j) -
     +                                 (op_rem_f(i,k,j)+op_den_f(i,k,j))
                        !3
                        op_tot_f(i,k,j) =op_rem_f(i,k,j)+op_den_f(i,k,j)
                        op_tot_f(i,k+1,j) = op_tot_f(i,k+1,j)+
     +                                      op_unrem_f(i,k,j)
                     else
                        op_tot_f(i,k,j) =op_rem_f(i,k,j)+op_den_f(i,k,j)
                     endif
                  endif
                
               endif


*   6.7  --  However, if this is not the case, then we must do a few
*            things:
*               1. alter the OM of the current box so that neither oxygen
*                  nor nitrate is removed past zero
*               2. calculate the total OM that is not remineralised by
*                  oxic and suboxic processes
*               3. if this is not the deepest box at the given lat and
*                  lon, shift this quantity of unremineralised OM into the
*                  next box. Otherwise, remineralise everything            
            
            else
               
               if (k.lt.kmt(i,j)) then
                 
                  !1
                  op_rem(i,k,j) = op_rem(i,k,j) * R_Olim(i,k,j)
                  op_den(i,k,j) = op_den(i,k,j) * R_Nlim(i,k,j)

                  !2
                  op_unrem(i,k,j) = op_tot(i,k,j) -
     +                              (op_rem(i,k,j)+op_den(i,k,j))
                  
                  !3
                  op_tot(i,k,j) = op_rem(i,k,j) + op_den(i,k,j)
                  op_tot(i,k+1,j) = op_tot(i,k+1,j) + op_unrem(i,k,j)
                  
               else
                  op_tot(i,k,j) = op_rem(i,k,j) + op_den(i,k,j)
               endif

            
               if (fix) then
               
                  if (k.lt.kmt(i,j)) then
                     R_Olim_f(i,k,j) = 0.0
                     R_Nlim_f(i,k,j) = 0.0
               
                     !1
                     op_rem_f(i,k,j) = op_rem_f(i,k,j) * R_Olim_f(i,k,j)
                     op_den_f(i,k,j) = op_den_f(i,k,j) * R_Nlim_f(i,k,j)

                     !2
                     op_unrem_f(i,k,j) = op_tot_f(i,k,j) -
     +                                 (op_rem_f(i,k,j)+op_den_f(i,k,j))
               
                     !3
                     op_tot_f(i,k,j) = op_rem_f(i,k,j) + op_den_f(i,k,j)
                     op_tot_f(i,k+1,j) = op_tot_f(i,k+1,j)+
     +                                   op_unrem_f(i,k,j)
                  else
                     op_tot_f(i,k,j) = op_rem_f(i,k,j) + op_den_f(i,k,j)
                  endif
               endif
                
            endif

         enddo ! --> loop over k
      endif ! --> kmt(i,j).ne.0
      enddo ! --> loop over i

      else  ! --> ReminRelax

         do i = istrt,iend
         if (kmt(i,j).ne.0) then
            do k = 1,km
        
               R_den(i,k,j) = 0.0
               op_rem(i,k,j) = pop(i,k,j)*(1.0-R_den(i,k,j))
               op_den(i,k,j) = pop(i,k,j)*R_den(i,k,j)
               op_tot(i,k,j) = op_den(i,k,j) + op_rem(i,k,j)

               if (fix) then
                  op_rem_f(i,k,j) = pop_fix(i,k,j)*(1.0-R_den(i,k,j))
                  op_den_f(i,k,j) = pop_fix(i,k,j)*R_den(i,k,j)
                  op_tot_f(i,k,j) = op_den_f(i,k,j) + op_rem_f(i,k,j)
               endif

            enddo
         endif
         enddo
      
      endif  ! --> ReminRelax
      endif  ! --> n.eq.n_oxy (i.e. that bgc is on)
     

*   6.8  --  Check conservation of matter
            
      if (n.eq.n_oxy) then
         do i = istrt,iend
         if (kmt(i,j).ne.0) then
            do k = 1,kmt(i,j)

            ! Check that all organic matter is accounted for
      
            tot_b = op_tot(i,k,j) + op_tot_f(i,k,j)
            tot_a = op_rem(i,k,j) + op_rem_f(i,k,j) + 
     +              op_den(i,k,j) + op_den_f(i,k,j)
               
            dif = tot_b-tot_a
            tot = tot_b+tot_a
            if (ABS(dif).gt.epsilon(tot)) then
               print*, " "
               print*, "   PELAGIC REMINERALISATION SCHEME NOT         "
               print*, "            CONSERVING MATTER                  "
               print*, " "
               print*," Org P in total m-2 s-1 = ",tot_b
               print*," Org P sum of parts m-2 s-1 = ",tot_a
               print*, " "
               print*, 'i = ',i,' j = ',j,'k = ',k
               print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
               print*, " "
               print*, " no3 = ", no3, " oxy = ", oxy
               print*, " optot =", op_tot(i,k,j),
     +                 " optot_f = ",op_tot_f(i,k,j)
               print*, " op_rem =", op_rem(i,k,j),
     +                 " op_den = ", op_den(i,k,j)
               print*, " op_rem_f =", op_rem_f(i,k,j),
     +                 " op_den_f = ", op_den_f(i,k,j)
               print*, " "
               print*, "              STOPPING MODEL                   "
               print*, " "
               print*, " "
               stop
            endif

            enddo
         endif
         enddo
      endif

      if (N15diagnostics) then
      do i = istrt,iend
         if (kmt(i,j).ne.0) then
            do k = 1,km
               if (n.eq.n_n15 .and. j.eq.latj .and. i.eq.loni) then
               print*, " "
               print*, op_tot(i,k,j),op_rem(i,k,j),op_den(i,k,j)
               print*, op_tot_f(i,k,j),op_rem_f(i,k,j),op_den_f(i,k,j)
               print*, " "
               endif
            enddo
         endif
      enddo
      endif


* ****  END STEP 6  **** *

      
***********************************************************
* ****  STEP 7 -->  DO SEDIMENT PROCESSES  **** *
***********************************************************

      if (n.eq.n_oxy) then  ! --> make sure calcs only happen once
      if (sedfluxes) then

*   7.1  --  Calculate and save flux of organics to sediment

      ! Here, we calculate organic matter arriving to the sediments 

      do i = istrt,iend
         k = kmt(i,j)
         if (kmt(i,j).ne.0) then
            if (Mcurve_b(i,j).lt.0.0) then
               if (kmt(i,j).gt.3) then
                  forgb = min(1.0, ( 
     +                    (zt(kmt(i,j)-1) + dzt(kmt(i,j)-1)*0.5)
     +                      *1e-4)**Mcurve_b(i,j) )
                  forg = min(1.0, ( 
     +                    (zt(kmt(i,j)) + dzt(kmt(i,j))*0.5)
     +                      *1e-4)**Mcurve_b(i,j) )
               else
                  forgb = 1.0
                  forg = 0.9 ! 90% hitting sed in shallow seas
               endif
            else
               if (kmt(i,j).gt.3) then
                  forgb = min(1.0, ( 
     +                    (zt(kmt(i,j)-1) + dzt(kmt(i,j)-1)*0.5)
     +                      *1e-4)**pwl_pop )
                  forg = min(1.0, ( 
     +                   (zt(kmt(i,j)) + dzt(kmt(i,j))*0.5)
     +                      *1e-4)**pwl_pop )
               else
                  forgb = 1.0
                  forg = 0.9
               endif
            endif 
           
            ! negative units in 1e-2 mmol PO4 m-2 s-1
            opsed(i,j) = -op_tot(i,1,j)*(forgb-forg)
            if (fix) opsed_f(i,j) = -op_tot_f(i,1,j)*(forgb-forg)
            sedCi(i,j) = -pic(i,1,j)*
     +                   (fmin_pic(kmt(i,j)-1)-fmin_pic(kmt(i,j))) 

            ! Is rain to sediment less than arriving at last box?
            if (opsed(i,j).gt.0.0 .or. opsed_f(i,j).gt.0.0 
     +          .or. sedCi(i,j).gt.0.0) then
               print*, " "
               print*, "Flux to sediment is greater than"
               print*, "     the flux from above.       " 
               print*, " "
               print*, i,j,kmt(i,j)
               print*, "Organic general P = ", opsed(i,j) 
               print*, "Organic fixed P = ", opsed_f(i,j) 
               print*, "Inorganic C = ", sedCi(i,j) 
               print*, "         Stopping run           "
               print*, " "
               stop
            endif

*   7.2  --  Recalculate the remineralisation of organics in the water
*            column of the final box (that which is remineralised above
*            the sediments
            if (op_tot(i,k,j).lt.0.0) then
               tot = op_tot(i,k,j) - opsed(i,j)
               op_brem(i,j) = tot * (op_rem(i,k,j)/op_tot(i,k,j))
               op_bden(i,j) = tot * (op_den(i,k,j)/op_tot(i,k,j))
            else
               tot = 0.0
               op_brem(i,j) = 0.0
               op_bden(i,j) = 0.0
            endif
            
            if (op_tot_f(i,k,j).lt.0.0) then
               tot = op_tot_f(i,k,j) - opsed_f(i,j)
               op_brem_f(i,j) = tot*(op_rem_f(i,k,j)/op_tot_f(i,k,j))
               op_bden_f(i,j) = tot*(op_den_f(i,k,j)/op_tot_f(i,k,j))
            else
               tot = 0.0
               op_brem_f(i,j) = 0.0
               op_bden_f(i,j) = 0.0
            endif

            ! Check that all organic matter is accounted for
            !  tot_b and tot_a should be zero if no org is created
            tot_b = op_tot(i,k,j) + op_tot_f(i,k,j)
            tot_a = op_brem(i,j) + op_bden(i,j) + opsed(i,j) +
     +              op_brem_f(i,j) + op_bden_f(i,j) + opsed_f(i,j)
               
            dif = tot_b-tot_a
            tot = tot_b+tot_a
            if (ABS(dif).gt.epsilon(tot)) then
               print*, " "
               print*, "   SEDIMENTARY REMINERALISATION SCHEME NOT     "
               print*, "            CONSERVING MATTER                  "
               print*, " "
               print*," Org P arriving m-2 s-1 = ",tot_b
               print*," Org P in water/sed parts m-2 s-1 = ",tot_a
               print*, " "
               print*, 'i = ',i,' j = ',j,'k = ',k
               print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
               print*, " "
               print*, " no3 = ", no3, " oxy = ", oxy
               print*, " op_tot =",op_tot(i,k,j),
     +                 " op_tot_f = ",op_tot_f(i,k,j)
               print*, " op_rem =",op_brem(i,j),
     +                 " op_rem_f = ",op_brem_f(i,j)
               print*, " op_den =",op_bden(i,j),
     +                 " op_den_f = ",op_bden_f(i,j)
               print*, " opsed =",opsed(i,j),
     +                 " opsed_f = ",opsed_f(i,j)
               print*, " "
               print*, "              STOPPING MODEL                   "
               print*, " "
               print*, " "
               stop
            endif

            
*   7.3  --  Calculate sedimentary remineralisation via either oxic or
*             suboxic means (i.e. sedimentary denitrification)
*
*               Two methods, 
*                   Bohlen2012 - parameterised function based on rain
*                                rate of organic carbon, and the ambient
*                                oxygen and nitrate concentrations
*                   Simple     - Assume everything remineralised via
*                                denitrification unless nitrate is
*                                limiting          
*          
            if (n_no3.gt.0) then ! requires no3 cycle to be on
            if (opsed(i,j).lt.0.0 .or. opsed_f(i,j).lt.0.0) then ! Org must be hitting sediment 
            
            if (Bohlen2012) then 
               
               oxy = max(0.0, tb(i,kmt(i,j),n_oxy))
               no3 = max(0.0, tb(i,kmt(i,j),n_no3))

               o_n = oxy-no3

               ! positive units of mmol N m-3 per leap timestep
               sdenTg = (0.06+0.19*0.99**o_n) * 
     +                 (-opsed(i,j)*carb2P(i,j))
     +                 *1e-2*c2dtts*dizt(kmt(i,j)) ! 0.0 if no org
               sdenTf = (0.06+0.19*0.99**o_n) * 
     +                  (-opsed_f(i,j)*CP_fix)
     +                  *1e-2*c2dtts*dizt(kmt(i,j)) ! 0.0 if no org
               
               ! positive units of mmol N m-3 per leap timestep
               if (sdenTg.gt.0.0) then
                  sdenG(i,j) = min(1.0, no3/sdenTg)*sdenTg ! remineralise general org first
               else
                  sdenG(i,j) = 0.0
               endif
               if (sdenTf.gt.0.0) then
                  sdenF(i,j) = min(1.0,(no3-sdenG(i,j))/sdenTf)*sdenTf
               else
                  sdenF(i,j) = 0.0
               endif
              
               ! convert back to 1e-2 mmol PO4 m-2 s-1 (negative units) 
               sdenG(i,j) = sdenG(i,j)/
     +                      (no3_rem(i,j)*1e-2*c2dtts*dizt(kmt(i,j)))
               sdenF(i,j) = sdenF(i,j)/
     +                      (no3_rem_f*1e-2*c2dtts*dizt(kmt(i,j)))
               
               ! negative units of 1e-2 mmol PO4 m-2 s-1 
               if (opsed(i,j).lt.0.0) then
                  sremG(i,j) = (1.-sdenG(i,j)/opsed(i,j))*opsed(i,j)
               else
                  sremG(i,j) = 0.0
               endif
               if (opsed_f(i,j).lt.0.0) then
                  sremF(i,j) = (1.-sdenF(i,j)/opsed_f(i,j))*opsed_f(i,j)
               else
                  sremF(i,j) = 0.0
               endif
            
            else   
               
               oxy = max(0.0, tb(i,kmt(i,j),n_oxy))
               no3 = max(0.0, tb(i,kmt(i,j),n_no3))
               
               ! positive units of mmol N m-3 per leap timestep
               if (opsed(i,j).lt.0.0) then
                  sdenTg = (opsed(i,j)*no3_rem(i,j))
     +                     *1e-2*c2dtts*dizt(kmt(i,j))
               else
                  sdenTg = 0.0
               endif
               if (opsed_f(i,j).lt.0.0) then
                  sdenTf = (opsed_f(i,j)*no3_rem_f)
     +                     *1e-2*c2dtts*dizt(kmt(i,j))
               else
                  sdenTf = 0.0
               endif
                  
               ! positive units of mmol N m-3 per leap timestep
               if (sdenTg.gt.0.0) then
                  sdenG(i,j) = min(1.0, no3/sdenTg)*sdenTg ! remineralise general org first
               else
                  sdenG(i,j) = 0.0
               endif
               if (sdenTf.gt.0.0) then
                  sdenF(i,j)=min(1.0,(no3-sdenG(i,j))/sdenTf)*sdenTf
               else
                  sdenF(i,j) = 0.0
               endif
              
               ! convert back to 1e-2 mmol PO4 m-2 s-1 (negative units) 
               sdenG(i,j) = sdenG(i,j)/
     +                      (no3_rem(i,j)*1e-2*c2dtts*dizt(kmt(i,j)))
               sdenF(i,j) = sdenF(i,j)/
     +                      (no3_rem_f*1e-2*c2dtts*dizt(kmt(i,j)))
               
               ! negative units of 1e-2 mmol PO4 m-2 s-1 
               if (opsed(i,j).lt.0.0) then
                  sremG(i,j) = (1.-sdenG(i,j)/opsed(i,j))*opsed(i,j)
               else
                  sremG(i,j) = 0.0
               endif
               if (opsed_f(i,j).lt.0.0) then
                  sremF(i,j) = (1.-sdenF(i,j)/opsed_f(i,j))*opsed_f(i,j)
               else
                  sremF(i,j) = 0.0
               endif
            
            endif ! --> end Bohlen or simple sed den scheme

             if (N15diagnostics) then
             if (j.eq.latj .and. i.eq.loni) then
             print*, " "
             print*, " "
             print*, " CHECK SEDIMENT FLUX FIELDS 1 "
             print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
             print*,op_brem(i,j), op_bden(i,j)
             print*,sremG(i,j), sdenG(i,j)
             print*,op_brem_f(i,j), op_bden_f(i,j)
             print*,sremF(i,j), sdenF(i,j)
             endif 
             endif
            
            ! Check that all organic matter is accounted for
            tot_b = opsed(i,j) + opsed_f(i,j)
            tot_a = sdenG(i,j)+sdenF(i,j)+sremG(i,j)+sremF(i,j)
               
            dif = tot_b-tot_a
            tot = tot_b+tot_a
            if (ABS(dif).gt.epsilon(tot)) then
               print*, " "
               print*, "   SEDIMENTARY REMINERALISATION SCHEME NOT     "
               print*, "            CONSERVING MATTER                  "
               print*, " "
               print*," Org P arriving m-2 s-1 = ",tot_b
               print*," Org P removed m-2 s-1 = ",tot_a
               print*, " "
               print*, 'i = ',i,' j = ',j,'k = ',kmt(i,j)
               print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
               print*, " "
               print*, " no3 = ", no3, " oxy = ", oxy
               print*, " sdenTg =", sdenTg," sdenTf = ", sdenTf
               print*, " sdenG =", sdenG(i,j)," sdenF = ", sdenF(i,j)
               print*, " sremG =", sremG(i,j)," sremF = ", sremF(i,j)
               print*, " "
               print*, "              STOPPING MODEL                   "
               print*, " "
               print*, " "
               stop
            endif
      
            else 
         
               op_brem(i,j) = 0.0
               op_brem_f(i,j) = 0.0
               op_bden(i,j) = 0.0
               op_bden_f(i,j) = 0.0
               sdenG(i,j) = 0.0
               sdenF(i,j) = 0.0
               sremG(i,j) = 0.0
               sremF(i,j) = 0.0
            
            endif ! --> if stuff is arriving to seafloor 
            endif ! --> N cycle to be on (n_no3.gt.0)
            endif ! --> kmt(i,j).gt.0

             if (N15diagnostics) then
             if (j.eq.latj .and. i.eq.loni) then
             print*, " "
             print*, " "
             print*, " CHECK SEDIMENT FLUX FIELDS 2 "
             print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
             print*,op_brem(i,j), op_bden(i,j)
             print*,sremG(i,j), sdenG(i,j)
             print*,op_brem_f(i,j), op_bden_f(i,j)
             print*,sremF(i,j), sdenF(i,j)
             endif 
             endif
            
         enddo ! --> loop over i dimension (longitude)

      else  ! --> if sedfluxes is FALSE 
         
         do i = istrt,iend
            if (kmt(i,j).ne.0) then
            op_brem(i,j) = 0.0
            op_brem_f(i,j) = 0.0
            op_bden(i,j) = 0.0
            op_bden_f(i,j) = 0.0
            sdenG(i,j) = 0.0
            sdenF(i,j) = 0.0
            sremG(i,j) = 0.0
            sremF(i,j) = 0.0
            endif
         enddo
         
      endif  ! --> sedfluxes 
      endif  ! --> n.eq.n_oxy
* ****  END STEP 7  **** *

      
***********************************************************
* ****  STEP 8 -->  Nitrogen Isotopic Fractionation  **** *
***********************************************************

      if (n.eq.n_n15) then
         do i = istrt,iend
         if (kmt(i,j).ne.0) then
         
            do k = 1,kmt(i,j)
           
               no3 = tb(i,k,n_no3)
               n15 = tb(i,k,n_n15)
           
               if (no3.lt.0.0 .and. n15.lt.0.0) then
                  no3 = -tb(i,k,n_no3)
                  n15 = -tb(i,k,n_n15)
               endif
        
               n14 = no3-n15


*   8.1  --  Store total amount of organic nitrate for future use
               ! convert pon to mmol no3 m-3 per leap timestep
               pon(i,k,j) = op_tot(i,k,j)*dizt(k)*c2dtts*
     +                      NtoP(i,j)*1e-2
               if (fix) then
                  ponf(i,k,j) = op_tot_f(i,k,j)*dizt(k)*c2dtts*
     +                          NP_fix*1e-2
               else
                  ponf(i,k,j) = 0.0
               endif
             

*   BEGIN FRACTIONATION OF NITROGEN *

               if (k.eq.1) then 
                  pon15(k) = 0.0
                  pon14(k) = 0.0
                  pon_cons(k) = 0.0
                  ponf15(k) = 0.0
                  ponf14(k) = 0.0
                  ponf_cons(k) = 0.0
               else

               call N_iso_frac(i,j,k,no3,n15,n14,pon(i,k,j),ponf(i,k,j),
     +                         N15_diagnostics, loni, latj, sedfluxes,
     +                         pon15(k), pon14(k), pon_cons(k),
     +                         ponf15(k), ponf14(k), ponf_cons(k),
     +                         d_n15(i,k,j),d_n15d(i,k,j),d_n15f(i,k,j),
     +                         d_n15df(i,k,j), d15Norg(i,j))


*   8.2  --  Calculate fractionation due to assimilation
               if (k.eq.1) then
               
               ! Initialise variables so no carry-on occurs as i,j changes
               on_rem = 0.0
               on_rem_f = 0.0
               no3_den = 0.0
               no3_den_f = 0.0
               tot = 0.0
               
                  if (pon(i,1,j).gt.0.0) then

                     ! 1. change in 15N needed to conserve delta15N
                     on_rem = pon(i,k,j)
                     d_n15(i,k,j) = (1.-(1./(n15/n14+1.)))*on_rem
                     
                     ! 2. isotopic and nutrient utilisation coefficients
                     IUC = max(0.0, n15/n14/1.0)
                     NUC = min(1.0, 1.0 - (pon(i,k,j)/no3))
                     
                     ! 3. change in 15N after fractionation
                     d_n15(i,k,j) = (d_n15(i,k,j) * IUC) /
     +                              (1. + Eass*1e-3*NUC) 

                     ! 4. store the assimilation 15N in organic matter
                     pon15(k) = d_n15(i,k,j)
                     pon14(k) = pon(i,k,j) - pon15(k)
                     pon_cons(k) = 0.0
                  
                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, " "
                     print*, "ASSIMILATION"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "NO3",no3, "15N",n15 
                     print*, "PON",pon(i,k,j), "POP",op_tot(i,k,j)
                     print*, "IUC",IUC, "NUC",NUC
                     print*, "change in 15N = ",d_n15(i,k,j)
                     print*, "PON15 = ", pon15(k), "PON14 = ", pon14(k)
                     print*, "Water delta15N = ", (( (n15 / (no3-n15))
     +                        / 1.0) -1.)*1000.
                     print*, "New delta15N = ", (( ((n15-d_n15(i,k,j)) /
     +                       ((no3-pon(i,k,j))-(n15-d_n15(i,k,j))) ) /
     +                       1.0) -1.)*1000.
                     print*, "New delta15PON = ",(( (pon15(k)/pon14(k))/
     +                                          1.0) -1.)*1000.
                     endif  
                     endif

                  else
                     
                     on_rem = 0.0
                     d_n15(i,k,j) = 0.0
                     pon14(k) = 0.0
                     pon15(k) = 0.0
                     pon_cons(k) = 0.0

                  endif


                  
                  ! 5. calculate storage of 15N due to nitrogen fixation
                  if (ponf(i,k,j).gt.0.0) then

                     ! NOTE : this ratio corresponds to a delta15N of 0,
                     ! and N-fixation will therefore contribute to
                     ! lowering the delta15N of the water column
                     ponf15(k) = (1. - (1./(1. + Efix*1e-3 + 1.)))
     +                        *ponf(i,k,j)
                     ponf14(k) = ponf(i,k,j) - ponf15(k)
                     ponf_cons(k) = 0.0
                     
                     ! set d_n15f to zero to account for no 15N uptake from water
                     d_n15f(i,k,j) = 0.0

                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, " "
                     print*, "ASSIMILATION (N-FIXATION)"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "PONf",ponf(i,k,j) 
                     print*, "PONf15 = ",ponf15(k),"PONf14 = ",ponf14(k)
                     print*, "change in 15N = ",d_n15f(i,k,j)
                     print*, "Water delta15N = ", (( (n15 / (no3-n15))
     +                        / 1.0) -1.)*1000.
                     print*,"New delta15PONf = ",(((ponf15(k)/ponf14(k))
     +                                            /1.0) -1.)*1000.
                     endif 
                     endif

                  else  ! if no N-fixation - no storage of 15N in organics

                     ponf15(k) = 0.0
                     ponf14(k) = 0.0
                     ponf_cons(k) = 0.0
                     d_n15f(i,k,j) = 0.0
                      
                  endif

               endif ! k.eq.1     
              

*   8.3  --  Calculate below surface processes:
*               TRANSFER FROM SURFACE TO SUBSURFACE (level 4)              
*               OXIC REMINERALISATION = release of 15N from organic matter              
*               PELAGIC DENITRIFICATION = consumption of 15N from water column

               if (k.gt.1 .and. k.lt.kmt(i,j)) then   
                 
                  ! track changes in isotopes as depth increases
                  pon15(k) = pon15(k-1)*(dizt(k)/dizt(k-1))
                  pon14(k) = pon14(k-1)*(dizt(k)/dizt(k-1))
                     
                  ! OXIC AND SUBOXIC REMINERALISATION
                  ! get the release of NO3 due to remineralisation
                  on_rem = (op_rem(i,k,j)+op_den(i,k,j))
     +                     *dizt(k)*c2dtts*NtoP(i,j)*1e-2
                  
                  ! track changes consumption as depth increases
                  pon_cons(k) = pon_cons(k-1) + 
     +                          (-on_rem*(dizt(1)/dizt(k)))
              
                  if (on_rem.lt.0.0) then ! if stuff was remineralised
              
                     ! calculate utilisation factors
                     ! 2. isotopic and nutrient utilisation coefficients
*                     IUC = max(0.0, pon15(k)/pon14(k)/1.0)
*                     NUC = min(1.0, 1.0 - (pon_cons(k)/pon(i,1,j)) )

                     ! calculate the release of 15N (value negative)
                     d_n15(i,k,j) = (1. - (1./(pon15(k)/pon14(k)+1.)))
     +                              *on_rem
                     ! Fractionation during remin causes very low del
                     ! values in the upper ocean, as n14 is
                     ! preferentially release. I have excluded this
                     ! process for now. pjb.
*                     d_n15(i,k,j) = (d_n15(i,k,j) * IUC) /
*     +                              (1. + Erem*1e-3*NUC) 
                     
                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, "REMINERALISATION - OXIC"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "NO3 = ",no3,"15N = ",n15
                     print*,"PON =",pon(i,k,j),"PONsurf =",pon(i,1,j)
                     print*, "NO3 release = ",on_rem," pon_cons = ",
     +                       pon_cons(k)                
                     print*,"PON15 = ",pon15(k),"PON14 = ",pon14(k)
                     print*, "IUC = ",IUC, "NUC = ", NUC
                     if (pon14(k).gt.0.0) then
                     print*,"Incoming delta15PON = ",(pon15(k)/
     +                        pon14(k) -1.)*1000.
                     endif
                     print*, "change in 15N = ",d_n15(i,k,j)
                     if (d_n15(i,k,j).lt.0.0) then
                     print*, "del15N released = ", ((-d_n15(i,k,j)/
     +                   (-on_rem+d_n15(i,k,j))/1.0)-1.0)*1000.
                     endif
                     print*, "Water delta15N = ",(( (n15 / (no3-n15))
     +                                        / 1.0) -1.)*1000.
                     print*, "New water delta15N = ", (( 
     +                        ((n15-d_n15(i,k,j)) /
     +                       ((no3-on_rem)-(n15-d_n15(i,k,j))) ) /
     +                       1.0) -1.)*1000.
                     endif
                     endif

                     ! calculate change in pon15 and pon14 due to frac
                     pon15(k) = pon15(k) - (-d_n15(i,k,j))
                     pon14(k) = pon14(k) - (-on_rem - (-d_n15(i,k,j)))
                  
                  else
                     
                     on_rem = 0.0
                     d_n15(i,k,j) = 0.0
                  
                  endif

                      
                  ! DENITRIFICATION
                  if (op_den(i,k,j).lt.0.0) then
                     ! get the consumption of NO3 due to suboxic remineralisation
                     no3_den = op_den(i,k,j)*dizt(k)
     +                         *c2dtts*1e-2*no3_rem(i,j)

                     IUC = max(0.0, (n15/n14)/1.0) 
                     !NUC = min(1.0,max(0.0, 1.0-no3_den/(no3-20.0))) ! dilution effect 
                     NUC = min(1.0, 1. - (no3_den/no3)) ! no dilution effect

                     ! calculate the consumption of 15N with fractionation
                     d_n15d(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                               * no3_den 
                     d_n15d(i,k,j) =  (d_n15d(i,k,j) * IUC) / 
     +                                (1. + Epden*1e-3*NUC)
                     
                     if (N15diagnostics) then
                        if (j.eq.latj .and. i.eq.loni) then
                        print*, " "
                        print*, "DENITRIFICATION"
                        print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                        print*, "NO3 = ",no3,"15N = ",n15
                        print*, "NO3 consumed = ",no3_den
                        print*, "IUC = ",IUC,"NUC = ",NUC
                        print*, "change in 15N = ",d_n15d(i,k,j)
                        print*, "Water delta15N = ",(( (n15 / 
     +                                               (no3-n15))
     +                                           / 1.0) -1.)*1000.
                        print*, "New water delta15N = ", (( 
     +                 ((n15-d_n15(i,k,j)-d_n15d(i,k,j)) /
     +                ( (no3-on_rem-no3_den) -
     +                  (n15-d_n15(i,k,j)-d_n15d(i,k,j)) 
     +                        )) / 1.0) -1.)*1000.
                        endif
                     endif

                  else
                     
                     no3_den = 0.0
                     d_n15d(i,k,j) = 0.0
                   
                  endif ! --> op_den(i,k,j).lt.0.0

                  
                  ! 2. Do the same for N-fixation
                  
                  ! OXIC AND SUBOXIC REMINERALISATION
                  ! get the release of NO3 due to remineralisation
                  on_rem_f = (op_rem_f(i,k,j) + op_den_f(i,k,j)) *
     +                        dizt(k)*c2dtts*NP_fix*1e-2
                     
                  ! track changes in organics and isotopes as depth increases
                  ponf_cons(k) = ponf_cons(k-1) + 
     +                           (-on_rem_f*(dizt(1)/dizt(k)))
                  ponf15(k) = ponf15(k-1)*(dizt(k)/dizt(k-1))
                  ponf14(k) = ponf14(k-1)*(dizt(k)/dizt(k-1))
                
                  if (on_rem_f.lt.0.0) then
                  
                     ! isotopic and nutrient utilisation coefficients
                     IUC = max(0.0, ponf15(k)/ponf14(k)/1.0)
                     NUC = min(1.0, 1.0 - (ponf_cons(k)/ponf(i,1,j)) )

                     ! calculate the release of 15N (value negative)
                     d_n15f(i,k,j) = (1.-(1./(ponf15(k)/ponf14(k)+1.)))
     +                              *on_rem_f
*                     d_n15f(i,k,j) = (d_n15f(i,k,j) * IUC) /
*     +                               (1. + Erem*1e-3*NUC) 
                     

                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, "REMINERALISATION - OXIC (NFIX)"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "NO3 = ",no3,"15N = ",n15
                     print*, "PONf = ",ponf(i,k,j),
     +                       "PONfsurf = ",ponf(i,1,j)
                     print*, "NO3 release = ",on_rem_f," pon_cons = ",
     +                       ponf_cons(k)                
                     print*,"PONf15 = ",ponf15(k),"PONf14 = ",ponf14(k)
                     print*, "IUC = ",IUC, "NUC = ", NUC
                     if (ponf14(k).gt.0.0) then
                     print*,"Incoming delta15PON = ",(ponf15(k)/
     +                        ponf14(k) -1.)*1000.
                     endif
                     print*, "change in 15N = ",d_n15f(i,k,j)
                     if (d_n15f(i,k,j).lt.0.0) then
                     print*, "del15N released = ", ((-d_n15f(i,k,j)/
     +                (-on_rem_f+d_n15f(i,k,j))/1.0)-1.0)*1000.
                     endif
                     print*, "Water delta15N = ",(( (n15 / (no3-n15))
     +                                        / 1.0) -1.)*1000.
                     print*, "New water delta15N = ", (( 
     +   ((n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)) /
     +           ( (no3-on_rem-on_rem_f-no3_den) -
     +    (n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)) ) ) /
     +                      1.0) -1.)*1000.
                     endif
                     endif
                     
                     ! calculate change in pon15 and pon14 due to frac
                     ponf15(k) = ponf15(k) -(-d_n15f(i,k,j))
                     ponf14(k) = ponf14(k) -(-on_rem_f-(-d_n15f(i,k,j)))

                  else
                    
                     on_rem_f = 0.0
                     d_n15f(i,k,j) = 0.0

                  endif ! --> on_rem_f.lt.0.0


                  ! DENITRIFICATION
                  if (op_den_f(i,k,j).lt.0.0) then
                     ! get the consumption of NO3 due to suboxic remineralisation
                     no3_den_f = op_den_f(i,k,j)*dizt(k)*c2dtts*1e-2
     +                           *no3_rem_f  ! no3_den_f now positive

                     IUC = max(0.0, (n15/n14)/1.0)
*                     NUC = max(0.0, min(1.0, 1.0 -
*     +                        ((no3_den_f+no3_den)/(no3-20.0)) )) 
                     NUC = max(0.0, min(1.0, 1.0 -
     +                        ((no3_den_f+no3_den)/no3) )) !!! MAY NEED TO CHANGE

                      ! calculate the consumption of 15N with fractionation
                     d_n15df(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                                * no3_den_f 
                     d_n15df(i,k,j) =  (d_n15df(i,k,j) * IUC) / 
     +                                 (1. + Epden*1e-3*NUC)
                  
                     if (N15diagnostics) then
                        if (j.eq.latj .and. i.eq.loni) then
                        print*, " "
                        print*, "DENITRIFICATION (NFIX)"
                        print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                        print*, "NO3 = ",no3,"15N = ",n15
                        print*, "NO3 consumed = ",no3_den_f
                        print*, "IUC = ",IUC,"NUC = ",NUC
                        print*, "change in 15N = ",d_n15df(i,k,j)
                        print*, "Water delta15N = ",(( (n15 / 
     +                                              (no3-n15))
     +                                           / 1.0) -1.)*1000.
                        print*, "New delta15N = ", (( 
     +  ((n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) /
     +                ( (no3-on_rem-on_rem_f-no3_den-no3_den_f) -
     +   (n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) 
     +                        )) / 1.0) -1.)*1000.
                        endif
                     endif
                   
                  else
                    
                     no3_den_f = 0.0
                     d_n15df(i,k,j) = 0.0

                  endif ! --> op_den(i,k,j).lt.0.0

               endif  ! --> k.gt.1 .and. k.lt.kmt(i,j) 
                  
*   8.4  --  Calculate sedimentary denitrification if active (i.e. sedfluxes):

               if (k.eq.kmt(i,j)) then
                  
                  ! First, determine whether sediment processes are active.
                  ! Sedfluxes == TRUE :
                  !     Release 15N in water above sediment - op_brem & op_bden
                  !                                         - op_brem_f & op_bden_f
                  !     Consume 15N in water above sediment - op_bden
                  !                                         - op_bden_f
                  !     Release 15N from sediment           - sremG & sdenG
                  !                                         - sremF & sdenF
                  !     Consume 15N from sediment           - sdenG
                  !                                         - sdenF
                  !
                  ! Sedfluxes == FALSE :
                  !     Release 15N in water above sediment - op_rem & op_den
                  !                                         - op_rem_f & op_den_f
                  !     Consume 15N in water above sediment - op_den
                  !                                         - op_den_f
                  
                  if (sedfluxes) then
                  
                  if (op_tot(i,k,j).lt.0.0) then ! norm phyto hitting sediments 
                     
                     ! get the release of NO3 due to water and sed remineralisation
                     on_rem = (op_brem(i,j) + op_bden(i,j) +
     +                         sremG(i,j) + sdenG(i,j) )
     +                         *dizt(k)*c2dtts*NtoP(i,j)*1e-2
                     
                     ! track changes in organics and isotopes as depth increases
                     pon_cons(k) = pon_cons(k-1) + 
     +                             (-on_rem*(dizt(1)/dizt(k)))
            
                     ! Check that all organic matter is consumed
                     !  tot_b and tot_a should be zero if no org is created
               
                     dif = pon(i,1,j)-pon_cons(k)
                     tot = pon(i,1,j)+pon_cons(k)
                     if (ABS(dif).gt.epsilon(tot)) then
                     print*, " "
                     print*, " N15 REMINERALISATION FRACTIONATION     "
                     print*, "       NOT CONSERVING MATTER           "
                     print*, " "
                     print*," PON created (mmol) = ",pon(i,1,j)
                     print*," PON consumed (mmol) = ",pon_cons(k)
                     print*, " "
                     print*, " total = ", tot
                     print*, " difference = ", dif
                     print*, " "
                     print*, 'i = ',i,' j = ',j,'k = ',k
                     print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
                     print*, " "
                     print*, " "
                     print*, "          STOPPING MODEL            "
                     print*, " "
                     print*, " "
                     stop
                     endif

                     pon15(k) = pon15(k-1)*(dizt(k)/dizt(k-1))
                     pon14(k) = pon14(k-1)*(dizt(k)/dizt(k-1))

                     ! release all remaining 15N (value negative) 
                     d_n15(i,k,j) = -pon15(k)

                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, "SEDIMENTS - OXIC RELEASE"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "NO3 = ",no3,"15N = ",n15
                     print*,"PON =",pon(i,k,j),"PONsurf =",pon(i,1,j)
                     print*, "NO3 release = ",on_rem," pon_cons = ",
     +                       pon_cons(k)                
                     print*,"PON15 = ",pon15(k),"PON14 = ",pon14(k)
                     if (pon14(k).gt.0.0) then
                     print*,"Incoming delta15PON = ",(pon15(k)/
     +                        pon14(k) -1.)*1000.
                     endif
                     print*, "change in 15N = ",d_n15(i,k,j)
                     if (d_n15(i,k,j).lt.0.0) then
                     print*, "del15N released = ", ((-d_n15(i,k,j)/
     +                   (-on_rem+d_n15(i,k,j))/1.0)-1.0)*1000.
                     endif
                     print*, "Water delta15N = ",(( (n15 / (no3-n15))
     +                                        / 1.0) -1.)*1000.
                     print*, "New water delta15N = ", (( 
     +                        ((n15-d_n15(i,k,j)) /
     +                       ((no3-on_rem)-(n15-d_n15(i,k,j))) ) /
     +                       1.0) -1.)*1000.
                     endif
                     endif

                    
                     if(sdenG(i,j).lt.0.0 .or. op_bden(i,j).lt.0.0)then
                     ! get the consumption of NO3 due to suboxic remineralisation
                        tot = sdenG(i,j) + op_bden(i,j)
                        no3_den = tot*dizt(k)*c2dtts*1e-2*no3_rem(i,j)

                        IUC = max(0.0, (n15/n14)/1.0) 
*                        NUC = min(1.0,max(0.0, 1.0-no3_den/(no3-20.0))) ! dilution effect 
                        NUC = min(1.0,max(0.0, 1.0-no3_den/no3)) ! no dilution effect 

                        ! calculate the consumption of 15N with fractionation of
                        ! pelagic den --> op_bden(i,j)
                        ! sediment den --> sdenG(i,j)
                        d_n15d(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                                  * no3_den 
                        d_n15d(i,k,j) = (d_n15d(i,k,j) * IUC) / (1. + 
     +                                Esden*1e-3*NUC*(sdenG(i,j)/tot) +
     +                                Epden*1e-3*NUC*(op_bden(i,j)/tot))
                        
                        if (N15diagnostics) then
                        if (j.eq.latj .and. i.eq.loni) then
                        print*, " "
                        print*, "SEDIMENTS - DENITRIFICATION"
                        print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                        print*, "NO3 = ",no3,"15N = ",n15
                        print*, "NO3 consumed = ",no3_den
                        print*, "IUC = ",IUC,"NUC = ",NUC
                        print*, "change in 15N = ",d_n15d(i,k,j)
                        print*, "Water delta15N = ",(( (n15 / 
     +                                               (no3-n15))
     +                                           / 1.0) -1.)*1000.
                        print*, "New water delta15N = ", (( 
     +                  ((n15-d_n15(i,k,j)-d_n15d(i,k,j)) /
     +                  ((no3-on_rem-no3_den) -
     +                  (n15-d_n15(i,k,j)-d_n15d(i,k,j)) 
     +                        )) / 1.0) -1.)*1000.
                        endif
                        endif
                     else
                   
                        tot = 0.0
                        no3_den = 0.0
                        d_n15d(i,k,j) = 0.0
                     
                     endif ! --> if denitrification (water or sed)
                  
                  else
                     
                     on_rem = 0.0
                     d_n15(i,k,j) = 0.0
                     tot = 0.0
                     no3_den = 0.0
                     d_n15d(i,k,j) = 0.0
                     pon15(k) = 0.0
                     pon14(k) = 0.0
                     pon_cons(k) = 0.0

                  endif  ! --> if norm organic matter hitting sediment
                  
                  
                  if (op_tot_f(i,k,j).lt.0.0) then ! n2 fixed org hitting sediments 
                     
                     ! get the release of NO3 due to water and sed remineralisation
                     on_rem_f = (op_brem_f(i,j) + op_bden_f(i,j) +
     +                           sremF(i,j) + sdenF(i,j) )
     +                           *dizt(k)*c2dtts*NP_fix*1e-2
                     
                     ! track changes in organics and isotopes as depth increases
                     ponf_cons(k) = ponf_cons(k-1) + 
     +                              (-on_rem_f*(dizt(1)/dizt(k)))
            
                     ! Check that all organic matter is consumed
                     !  tot_b and tot_a should be zero if no org is created
               
                     dif = ponf(i,1,j)-ponf_cons(k)
                     tot = ponf(i,1,j)+ponf_cons(k)
                     if (ABS(dif).gt.epsilon(tot)) then
                     print*, " "
                     print*, " N15 REMINERALISATION FRACTIONATION     "
                     print*, "       NOT CONSERVING MATTER           "
                     print*, " "
                     print*," PONf created (mmol) = ",ponf(i,1,j)
                     print*," PONf consumed (mmol) = ",ponf_cons(k)
                     print*, " "
                     print*, 'i = ',i,' j = ',j,'k = ',k
                     print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
                     print*, " "
                     print*, " "
                     print*, "          STOPPING MODEL            "
                     print*, " "
                     print*, " "
                     stop
                     endif

                     ponf15(k) = ponf15(k-1)*(dizt(k)/dizt(k-1))
                     ponf14(k) = ponf14(k-1)*(dizt(k)/dizt(k-1))

                     ! release all remaining 15N (value negative) 
                     d_n15f(i,k,j) = -ponf15(k)


                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, "SEDIMENTS - OXIC RELEASE (NFIX)"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "NO3 = ",no3,"15N = ",n15
                     print*,"PON =",ponf(i,k,j),"PONsurf =",ponf(i,1,j)
                     print*,"op_brem =",op_brem_f(i,j),
     +                      "op_bden =",op_bden_f(i,j)
                     print*,"sremF =",sremF(i,j),"sdenF =",sdenF(i,j)
                     print*, "NO3 release = ",on_rem_f
                     print*, "change in 15N = ",d_n15f(i,k,j)
                     if (d_n15f(i,k,j).lt.0.0) then
                     print*, "del15N released = ", ((-d_n15f(i,k,j)/
     +                   (-on_rem_f+d_n15f(i,k,j))/1.0)-1.0)*1000.
                     endif
                     print*, "Water delta15N = ",(( (n15 / (no3-n15))
     +                                        / 1.0) -1.)*1000.
                     print*, "New water delta15N = ", (( 
     +    ((n15-d_n15(i,k,j)-d_n15d(i,k,j)-d_n15f(i,k,j)) /
     +    ((no3-on_rem-on_den-on_rem_f)-(n15-d_n15(i,k,j)
     +     -d_n15d(i,k,j)-d_n15f(i,k,j))) ) / 1.0) -1.)*1000.
                     endif
                     endif
                   
                     if(sdenF(i,j).lt.0.0.or.op_bden_f(i,j).lt.0.0)then
                     ! get the consumption of NO3 due to suboxic remineralisation
                        tot = sdenF(i,j) + op_bden_f(i,j)
                        no3_den_f = tot*dizt(k)*c2dtts*1e-2*no3_rem_f

                        IUC = max(0.0, (n15/n14)/1.0)
*                        NUC = min(1.0,max(0.0,1.0-no3_den_f/(no3-20.0)))! dilution effect 
                        NUC = min(1.0,max(0.0, 1.0 - (no3_den+no3_den_f)
     +                                              / no3 )) ! no dilution effect 

                        ! calculate the consumption of 15N with fractionation of
                        ! pelagic den --> op_bden_f(i,j)
                        ! sediment den --> sdenF(i,j)
                        d_n15df(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                                  * no3_den_f 
                        d_n15df(i,k,j) = (d_n15df(i,k,j) * IUC) / (1. + 
     +                                Esden*1e-3*NUC*(sdenF(i,j)/tot) +
     +                              Epden*1e-3*NUC*(op_bden_f(i,j)/tot))
                        
                        if (N15diagnostics) then
                        if (j.eq.latj .and. i.eq.loni) then
                           print*, " "
                           print*, "SEDIMENT DENITRIFICATION (NFIX)"
                           print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                           print*, "NO3 = ",no3,"15N = ",n15
                           print*, "NO3 consumed = ",no3_den_f
                           print*, "Sed denF = ",sdenF(i,j),
     +                             "Water denF = ",op_bden_f(i,j)
                           print*, "IUC = ",IUC,"NUC = ",NUC
                           print*, "change in 15N = ",d_n15df(i,k,j)
                           print*, "Water delta15N = ",(( (n15 / 
     +                                                 (no3-n15))
     +                                              / 1.0) -1.)*1000.
                           print*, "New delta15N = ", (( 
     +  ((n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) /
     +                ( (no3-on_rem-on_rem_f-no3_den-no3_den_f) -
     +   (n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) 
     +                           )) / 1.0) -1.)*1000.
                        endif
                        endif
                     else
                   
                        tot = 0.0
                        no3_den_f = 0.0
                        d_n15df(i,k,j) = 0.0
                     
                     endif ! --> if denitrification (water or sed)
                  
                  else
                    
                     on_rem_f = 0.0
                     d_n15f(i,k,j) = 0.0
                     tot = 0.0
                     no3_den_f = 0.0
                     d_n15df(i,k,j) = 0.0
                     ponf15(k) = 0.0
                     ponf14(k) = 0.0
                     ponf_cons(k) = 0.0

                  endif  ! --> if n2 fixed organic matter hitting sediment

                 
                  else  ! --> that sedfluxes==FALSE
                 

                  ! track changes in isotopes as depth increases
                  pon15(k) = pon15(k-1)*(dizt(k)/dizt(k-1))
                  pon14(k) = pon14(k-1)*(dizt(k)/dizt(k-1))
                     
                  ! OXIC AND SUBOXIC REMINERALISATION
                  ! get the release of NO3 due to remineralisation
                  on_rem = (op_rem(i,k,j)+op_den(i,k,j))
     +                     *dizt(k)*c2dtts*NtoP(i,j)*1e-2
                  
                  ! track changes consumption as depth increases
                  pon_cons(k) = pon_cons(k-1) + 
     +                          (-on_rem*(dizt(1)/dizt(k)))
              
                  ! Check that all organic matter is consumed
                  !  tot_b and tot_a should be zero if no org is created
               
                  dif = pon(i,1,j)-pon_cons(k)
                  tot = pon(i,1,j)+pon_cons(k)
                  if (ABS(dif).gt.epsilon(tot)) then
                  print*, " "
                  print*, " N15 REMINERALISATION FRACTIONATION     "
                  print*, "       NOT CONSERVING MATTER           "
                  print*, " "
                  print*," PON created (mmol) = ",pon(i,1,j)
                  print*," PON consumed (mmol) = ",pon_cons(k)
                  print*, " "
                  print*, 'i = ',i,' j = ',j,'k = ',k
                  print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
                  print*, " "
                  print*, " "
                  print*, "          STOPPING MODEL            "
                  print*, " "
                  print*, " "
                  stop
                  endif

                  if (on_rem.lt.0.0) then ! if stuff was remineralised
                     
                     ! release all remaining 15N (value negative) 
                     d_n15(i,k,j) = -pon15(k)

                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, "REMINERALISATION - OXIC"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "NO3 = ",no3,"15N = ",n15
                     print*,"PON =",pon(i,k,j),"PONsurf =",pon(i,1,j)
                     print*, "NO3 release = ",on_rem
                     print*, "change in 15N = ",d_n15(i,k,j)
                     if (d_n15(i,k,j).lt.0.0) then
                     print*, "del15N released = ", ((-d_n15(i,k,j)/
     +                   (-on_rem+d_n15(i,k,j))/1.0)-1.0)*1000.
                     endif
                     print*, "Water delta15N = ",(( (n15 / (no3-n15))
     +                                        / 1.0) -1.)*1000.
                     print*, "New water delta15N = ", (( 
     +                        ((n15-d_n15(i,k,j)) /
     +                       ((no3-on_rem)-(n15-d_n15(i,k,j))) ) /
     +                       1.0) -1.)*1000.
                     endif
                     endif
                  
                  else
                     
                     tot = 0.0
                     dif = 0.0
                     on_rem = 0.0
                     d_n15(i,k,j) = 0.0

                  endif ! --> on_rem.lt.0.0

                  
                  ! DENITRIFICATION
                  if (op_den(i,k,j).lt.0.0) then
                     ! get the consumption of NO3 due to suboxic remineralisation
                     no3_den = op_den(i,k,j)*dizt(k)
     +                         *c2dtts*1e-2*no3_rem(i,j)

                     IUC = max(0.0, (n15/n14)/1.0)
*                     NUC = min(1.0,max(0.0, 1.0-no3_den/(no3-20.0))) ! dilution effect 
                     NUC = min(1.0, 1. - (no3_den/no3)) ! no dilution effect

                     ! calculate the consumption of 15N with fractionation
                     d_n15d(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                               * no3_den 
                     d_n15d(i,k,j) =  (d_n15d(i,k,j) * IUC) / 
     +                                (1. + Epden*1e-3*NUC)
                  
                     if (N15diagnostics) then
                        if (j.eq.latj .and. i.eq.loni) then
                        print*, " "
                        print*, "DENITRIFICATION"
                        print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                        print*, "NO3 = ",no3,"15N = ",n15
                        print*, "NO3 consumed = ",no3_den
                        print*, "IUC = ",IUC,"NUC = ",NUC
                        print*, "change in 15N = ",d_n15d(i,k,j)
                        print*, "Water delta15N = ",(( (n15 / 
     +                                               (no3-n15))
     +                                           / 1.0) -1.)*1000.
                        print*, "New water delta15N = ", (( 
     +                 ((n15-d_n15(i,k,j)-d_n15d(i,k,j)) /
     +                ( (no3-on_rem-no3_den) -
     +                  (n15-d_n15(i,k,j)-d_n15d(i,k,j)) 
     +                        )) / 1.0) -1.)*1000.
                        endif
                     endif
                   
                  else
                     
                     tot = 0.0
                     dif = 0.0
                     no3_den = 0.0
                     d_n15d(i,k,j) = 0.0

                  endif ! --> op_den(i,k,j).lt.0.0

                  
                  ! 2. Do the same for N-fixation
                  
                  ! OXIC AND SUBOXIC REMINERALISATION
                  ! get the release of NO3 due to remineralisation
                  on_rem_f = (op_rem_f(i,k,j) + op_den_f(i,k,j)) *
     +                        dizt(k)*c2dtts*NP_fix*1e-2
                     
                  ! track changes in organics and isotopes as depth increases
                  ponf_cons(k) = ponf_cons(k-1) + 
     +                           (-on_rem_f*(dizt(1)/dizt(k)))
                  ponf15(k) = ponf15(k-1)*(dizt(k)/dizt(k-1))
                  ponf14(k) = ponf14(k-1)*(dizt(k)/dizt(k-1))
                     
                  ! Check that all organic matter is consumed
                  !  tot_b and tot_a should be zero if no org is created
                  dif = ponf(i,1,j)-ponf_cons(k)
                  tot = ponf(i,1,j)+ponf_cons(k)
                  if (ABS(dif).gt.epsilon(tot)) then
                  print*, " "
                  print*, " N15 REMINERALISATION FRACTIONATION     "
                  print*, "       NOT CONSERVING MATTER           "
                  print*, " "
                  print*," PONf created (mmol) = ",ponf(i,1,j)
                  print*," PONf consumed (mmol) = ",ponf_cons(k)
                  print*, " "
                  print*, 'i = ',i,' j = ',j,'k = ',k
                  print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
                  print*, " "
                  print*, " "
                  print*, "          STOPPING MODEL            "
                  print*, " "
                  print*, " "
                  stop
                  endif
                
                  if (on_rem_f.lt.0.0) then
                
                     ! release all remaining 15N (value negative) 
                     d_n15f(i,k,j) = -ponf15(k)

                     if (N15diagnostics) then
                     if (j.eq.latj .and. i.eq.loni) then
                     print*, " "
                     print*, "REMINERALISATION - OXIC (NFIX)"
                     print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                     print*, "NO3 = ",no3,"15N = ",n15
                     print*, "PONf = ",ponf(i,k,j) 
                     print*, "NO3 release = ",on_rem_f
                     print*,"PONf15=",ponf15(k),"PONf14=",ponf14(k)
                     print*, "change in 15N = ",d_n15f(i,k,j)
                     if (d_n15f(i,k,j).lt.0.0) then
                     print*, "del15N released = ", ((-d_n15f(i,k,j)/
     +                (-on_rem_f+d_n15f(i,k,j))/1.0)-1.0)*1000.
                     endif
                     print*, "Water delta15N = ",(( (n15 / (no3-n15))
     +                                        / 1.0) -1.)*1000.
                     print*, "New water delta15N = ", (( 
     +   ((n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)) /
     +           ( (no3-on_rem-on_rem_f-no3_den) -
     +    (n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)) ) ) /
     +                      1.0) -1.)*1000.
                     endif
                     endif

                  else
                    
                     tot = 0.0
                     dif = 0.0
                     on_rem_f = 0.0
                     d_n15f(i,k,j) = 0.0

                  endif ! --> on_rem_f.lt.0.0
                  
                  
                  ! DENITRIFICATION
                  if (op_den_f(i,k,j).lt.0.0) then
                     ! get the consumption of NO3 due to suboxic remineralisation
                     no3_den_f = op_den_f(i,k,j)*dizt(k)*c2dtts*1e-2
     +                           *no3_rem_f  ! no3_den_f now positive

                     IUC = max(0.0, (n15/n14)/1.0)
*                     NUC = max(0.0, min(1.0, 1.0 -
*     +                        ((no3_den_f+no3_den)/(no3-20.0)) )) 
                     NUC = max(0.0, min(1.0, 1.0 -
     +                        ((no3_den_f+no3_den)/no3) )) 

                      ! calculate the consumption of 15N with fractionation
                     d_n15df(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                                * no3_den_f 
                     d_n15df(i,k,j) =  (d_n15df(i,k,j) * IUC) / 
     +                                 (1. + Epden*1e-3*NUC)
                  
                     if (N15diagnostics) then
                        if (j.eq.latj .and. i.eq.loni) then
                        print*, " "
                        print*, "DENITRIFICATION (NFIX)"
                        print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
                        print*, "NO3 = ",no3,"15N = ",n15
                        print*, "NO3 consumed = ",no3_den_f
                        print*, "IUC = ",IUC,"NUC = ",NUC
                        print*, "change in 15N = ",d_n15df(i,k,j)
                        print*, "Water delta15N = ",(( (n15 / 
     +                                              (no3-n15))
     +                                           / 1.0) -1.)*1000.
                        print*, "New delta15N = ", (( 
     +  ((n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) /
     +                ( (no3-on_rem-on_rem_f-no3_den-no3_den_f) -
     +   (n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) 
     +                        )) / 1.0) -1.)*1000.
                        endif
                     endif
                   
                  else
                    
                     tot = 0.0
                     dif = 0.0
                     no3_den_f = 0.0
                     d_n15df(i,k,j) = 0.0
                  
                  endif ! --> op_den_f(i,k,j).lt.0.0

                  
                  endif  ! --> sedfluxes==TRUE 
                        


*   8.5  --  Save delta 15N of raining organic matter hitting sediments:

                  if (pon15(k).gt.0.0 .or. ponf15(k).gt.0.0) then 
                     d15Norg(i,j) = ( (pon15(k)+ponf15(k)) /
     +                                (pon14(k)+ponf14(k))-1.0)*1e3
                  endif
               


               endif  ! --> k.eq.kmt(i,j) 



               if (N15diagnostics) then
               if (j.eq.latj .and. i.eq.loni) then
               print*, " "
               print*, " "
               print*, " RESULTS FOR SOURCE EQUATION "
               print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
               print*, "NO3 = ",no3,"15N = ",n15
               print*, "Water delta15N = ",(( (n15 / 
     +                                     (no3-n15))
     +                                  / 1.0) -1.)*1000.
               print*, "NO3 assim = ",on_rem, on_rem_f
               print*, "NO3 denit = ",no3_den, no3_den_f
               print*, "15N assim = ",d_n15(i,k,j),
     +                  d_n15f(i,k,j)
               print*, "15N denit = ",d_n15d(i,k,j),
     +                  d_n15df(i,k,j)
               print*, "New delta15N = ", (( 
     +  ((n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) /
     +                ( (no3-on_rem-on_rem_f-no3_den-no3_den_f) -
     +   (n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) 
     +                  )) / 1.0) -1.)*1000.
               endif
               endif

            enddo ! do k = 1,kmt(i,j)   
            endif ! if kmt(i,j).gt.0
         enddo ! do i = istrt,iend
      endif !if n.eq.n_n15

* ****  END STEP 8  **** *


****************************************************************
* ****  STEP 9 -->  NITROUS OXIDE PRODUCTION/CONSUMPTION  **** *
****************************************************************

      if (n.eq.n_n2o) then 
      if (n_tou.gt.0 .and. n_oxy.gt.0 .and. 
     +    n_age.gt.0 .and. n_tomz.gt.0) then
         do i = istrt,iend

         if (kmt(i,j).ne.0) then  ! --> select for only ocean points
         
*   9.1  --  Shelf N2O Production (Freing et al. 2012 Phil Trans R Soc B)
         if (kmt(i,j).ge.1 .and. kmt(i,j).le.6) then
            do k = 3,km

            age = max(1e-3,tb(i,k,n_age))
            temp = tb(i,k,1)
            tour = (tb(i,k,n_tou)-tb(i,k,n_oxy))/age
            ! units umol/m3 yr-1
            d_n2o(i,k,j) = tour*0.1793*exp(-zt(k)/350.0) + 0.5374

            enddo
         endif
         
*   9.2  --  Open Ocean N2O Production (Freing et al. 2012 Phil Trans R Soc B)
         if (kmt(i,j).gt.6) then
            do k = 3,km

            age = max(1e-3,tb(i,k,n_age))
            
            if (N2Otemp) then

               temp = tb(i,k,1)
               tour =(tb(i,k,n_tou)-tb(i,k,n_oxy))/age
               ! units umol/m3 yr-1
               d_n2o(i,k,j) = tour*0.0665*exp(-temp/20000.0) - 0.0032
               

            elseif (N2Odepth) then

               tour =(tb(i,k,n_tou)-tb(i,k,n_oxy))/age
               ! units umol/m3 yr-1
               d_n2o(i,k,j) = tour*0.0658*exp(-zt(k)/20000.0) - 0.0065

            endif
         
            enddo
         endif
       
*   9.3 --  Production and consumption due to denitrification
         if (deN) then
            do k = 3,kmt(i,j)

               if (op_den(i,k,j).ne.0.0 .or. op_den_f(i,k,j).ne.0.0)then

                  age = max(1e-3, tb(i,k,n_age))
                  tomz = max(1e-3, tb(i,k,n_tomz))

                  if (tb(i,k,n_oxy).gt.1.0) then
                  
                     n2o_Pden = max(0.0, 1.0/tomz * (
     +                          (omz_max - (d_n2o(i,k,j)+tb(i,k,n_n2o)))
     +                          - 0.5*(omz_max - omz_mean) ))
                  
                  else
                     
                     n2o_Cden = max(0.0, 1.0/tomz * (
     +                          ((d_n2o(i,k,j)+tb(i,k,n_n2o)) - omz_min)
     +                          - 0.5*(omz_mean - omz_min) ))
                  
                  endif

               endif
               
            enddo
         endif

         endif  ! --> kmt(i,j).gt.0

         ! No N2O production or consumption above 50 m
         d_n2o(i,1,j) = 0.0
         d_n2o(i,2,j) = 0.0

         enddo

      else

        print*, " "
        print*, " PLEASE TURN ON OXYGEN, TOU, AGE and OMZ-AGE TRACERS "
        print*, "   They are required for the calculation    "
        print*, "             of Nitrous Oxide.              "
        print*, " "
        stop
        
      endif  
      endif  ! --> n.eq.n_n2o
      

* ****  END STEP 9  **** *
      
*****************************************************
* ****  STEP 10 -->  COMPUTE SOURCES AND SINKS  **** *
*****************************************************

      do i = istrt,iend
         
         isurf = 1.
         fixer = 0.
         nbot = 1.
         bot = 0.
      
      if (kmt(i,j).ne.0) then
         do k = 1,kmt(i,j)

            if (sedfluxes .and. k.eq.kmt(i,j)) bot = 1.
            if (sedfluxes .and. k.eq.kmt(i,j)) nbot = 0.

*   10.1  --  Modify the P:C:O ratio since pop is used in source calculation
            vredf = 1.
            if (n.eq.n_dic .or. n.eq.n_c13 .or. n.eq.n_oxy) then 
               if (ivredc.eq.0) then 
                  vredf = 1.
               endif
               if (ivredc.eq.1) then
                  vredf = ( 1. + ( pco2o(i,j,n_dic-2) - 280. ) 
     +                      * 2. / 700. / 6.6 )
               endif
               if (ivredc.eq.2) then
                  vredf = (1. + (pco2a - 280.) * 2. / 700. / 6.6)
               endif
               if (ivredo.eq.0 .and. n.eq.n_oxy) then
                  vredf = 1.
               endif
            endif

*   10.2  --  Net source/sink for each tracer

               if (n.eq.n_oxy) then
                  source(i,k) = ((-op_rem(i,k,j)*o2_rem(i,j) -
     +                            op_rem_f(i,k,j)*o2_rem_f)*nbot -
     +                          ((sremG(i,j)+op_brem(i,j))*o2_rem(i,j) -
     +                         (sremF(i,j)+op_brem_f(i,j))*o2_rem_f)*bot
     +                            - pic(i,k,j) * ratio_pic(n) +
     +                            fluxgas(i,j,n-2) * isurf )*dizt(k)
               endif
               if (n.eq.n_dic) then
                  source(i,k) = (( -op_tot(i,k,j) * carb2P(i,j) -
     +                            op_tot_f(i,k,j) * CP_fix)*vredf - 
     +                            pic(i,k,j) * ratio_pic(n) +
     +                            fluxgas(i,j,n-2) * isurf ) * dizt(k)
               endif
               if (n.eq.n_c13) then
                  if (k.eq.1) then
                     ratio = ( tb(i,1,n) + tr_off(n) ) /
     +                        ( tb(i,1,n_dic)+tr_off(n_dic) )
                  endif
                  source(i,k) = ( ( (-op_tot(i,k,j)*c13toc(i,j) -
     +                               op_tot_f(i,k,j)*CP_fix*(103.8/106.)
     +                                )*vredf -
     +                              pic(i,k,j) * ratio_pic(n) )*ratio +
     +                            fluxgas(i,j,n-2)*isurf ) * dizt(k)
               endif
               if (n.eq.n_pho) then
                  source(i,k) = ( -op_tot(i,k,j) - op_tot_f(i,k,j) -
     +                            pic(i,k,j) * ratio_pic(n) +
     +                            fluxgas(i,j,n-2) * isurf ) * dizt(k)
               endif
               if (n.eq.n_alk) then
*               !See Wolf-Gladrow 2007 Marine Chem for explanation
                  source(i,k) = (((-op_rem(i,k,j)*(-NtoP(i,j)) -
     +                             op_rem_f(i,k,j)*(-NP_fix)*fixer -
     +                             op_den(i,k,j)*(-no3_rem(i,j)) -  
     +                             op_den_f(i,k,j)*(-no3_rem_f) -
     +                             op_den(i,k,j)*(-NtoP(i,j)) -  
     +                          op_den_f(i,k,j)*(-NP_fix)*fixer))*nbot -
     +                           ( op_brem(i,j)*(-NtoP(i,j)) - 
     +                             op_brem_f(i,j)*(-NP_fix) -
     +                             op_bden(i,j)*(-no3_rem(i,j)) -
     +                             op_bden_f(i,j)*(-no3_rem_f) - 
     +                             sdenG(i,j)*(-no3_rem(i,j)) -
     +                             sdenF(i,j)*(-no3_rem_f) )*bot - 
     +                            pic(i,k,j)*ratio_pic(n) +
     +                            fluxgas(i,j,n-2)*isurf)
     +                             *dizt(k)
               endif
               if (n.eq.n_fe) then   
                  source(i,k) = ( (-op_tot(i,k,j)*ratio_pop(n) -
     +                              op_tot_f(i,k,j)*0.64)*vredf !0.64 is Fe:P of Kustka et al 2003 LO
     +                            + fluxgas(i,j,n-2)*isurf)*dizt(k)
     +                          - max(0.0, (tb(i,k,n)) - 0.60) 
     +                          / (86400. * 365)
               endif
               if (n.eq.n_no3) then
                  ! Capture pelagic denitrification rate 
                  no3deN(i,k,j) = ((-op_den(i,k,j)*no3_rem(i,j) -
     +                               op_den_f(i,k,j)*no3_rem_f)*nbot -
     +                             ( op_bden(i,j)*no3_rem(i,j) -
     +                               op_bden_f(i,j)*no3_rem_f)*bot
     +                               )*dizt(k)
                  ! Capture sedimentary denitrification rate 
                  no3sed(i,j) = (-sdenG(i,j)*no3_rem(i,j) -
     +                            sdenF(i,j)*no3_rem_f  )
     +                            *dizt(kmt(i,j))*bot
                  ! Capture nitrogen fixation rate
                  Nfix(i,k,j) = -op_tot_f(i,k,j)*NP_fix*fixer*dizt(k)

                  source(i,k) = ( -op_rem(i,k,j)*NtoP(i,j) 
     +                            - op_den(i,k,j)*NtoP(i,j) 
     +                            - pic(i,k,j) * ratio_pic(n)
     +                            + (fluxgas(i,j,n-2)*isurf) )*dizt(k)
     +                            + no3deN(i,k,j) + Nfix(i,k,j)
     +                            + no3sed(i,j)
               endif
               if (n.eq.n_n15) then
                   source(i,k) = (( -d_n15(i,k,j) - d_n15f(i,k,j)
     +                              -d_n15d(i,k,j) - d_n15df(i,k,j) )
     +                           / (c2dtts*1e-2)) +
     +                           (fluxgas(i,j,n-2)*isurf)*dizt(k)
               endif
               if (n.eq.n_tou) then
                  source(i,k) = (fluxgas(i,j,n-2)*isurf) * dizt(k)
               endif
               if (n.eq.n_n2o) then
                  source(i,k) = (d_n2o(i,k,j)*(1.0/86400.0) +
     +                           fluxgas(i,j,n-2)*isurf) * dizt(k)
               endif
               
            isurf = c0
            fixer = 1.

         enddo
      endif
      enddo


#ifdef rjm_geo_seq
      if (igas(n-2).eq.2) then 
         if (n.eq.n_dic .and. j.eq.2) then
            ttflux(1) = ttflux(1) + 1
         endif
         do i = 2,imt-1
            da = dxt(i)*dyt(j)*cst(j)
            ttflux(n) = ttflux(n) + fluxgas(i,j,n-2) * da
         enddo

         ! write fluxes
         if (j.eq.jmt-1) then
            fc = 1e-5 * 1e-4 * 12e-15  ! convert flux to GtC/s 
            fcc = gCtppm * tott * spy
            stflux(n) = ttflux(n) * fc / max(ttflux(1), 1.)
            if (ifix(tott).eq.tott ) then
               write(91,*) tott, n, dpco2a, geo_seq(n)*fcc,
     +                     stflux(n)*fcc, stflux(n_dic)*fcc,
     +                     ( geo_seq(n)-stflux(n_dic)+stflux(n) )*fcc,
     +                     ttflux(1)
            endif
         endif
      endif
#endif

* ****  END STEP 10  **** *
      
       return
       end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c




c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine tx_growth (j)

c	Author: r.j.matear
c 	
c    Compute adjustment to export production based on variable 
c    temperature and mixed layer depth
c
c......................................................................c

      include "obgc.h"
      include "bio.h"
#ifdef dmr_tconstant
      include "oline.h"
#endif

* Time terms
      parameter (istrt=2, iend=imt-1)
      c0=0.
      p5=.5
      par=pmodel(9)
      alpha=pmodel(10)
      dps = 1/86400.   ! inverse of seconds per day

* Compute mixed layer depth
      do i = istrt,iend 

         k = 1
         mld = k
         
         do k = 1,km 
            if (mld.eq.k .and. k.le.kmt(i,j)-1) then
               if (abs (tb(i,1,1) - tb(i,k,1)) .lt. .01) then
                  mld = k
               endif
            endif
         enddo
        
         xmld(i,j) = (zt(mld) + dzt(mld)*p5)   !cm
         xmld(i,j) = dzt(1)

* factor for the mld variability
         fmld = dzt(1)/xmld(i,j)  ! reduced growth with mld

#ifdef dmr_tconstant
         tsurf = 10
#endif

         fpgr_temp(i,j) = c0
         if (kmt(i,j) .ne. 0 ) then 
            ! Compute Temperature and mixed layer depth adjustments
            tsurf = tb(i,1,1)
            fmax =  0.6*(1.066)**tsurf
            f1 = sbcbio(i,j,2)*alpha*par

            ! Evans and Parslow PI equation
            !	 	fi = fmax*f1/sqrt(fmax**2 + f1**2 )
            ! Brian Griffiths PI equation
            fi = fmax * (1 - exp( -f1/fmax) )

            Vmax(i,j) = fmax*dps  ! per second
            ! old   fpgr_temp(i,j) = fi*fmld*s_npp*dps  !per second
            fpgr_temp(i,j) = fi*fmld*dps / Vmax(i,j) !unitless


         endif

      enddo
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c



c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine stoich (i,j,phs,no3)

c
c   Routine to determine the stoichiometry of Carbon, Hydrogen, Oxygen
c   and Nitrogen to Phosphate based on the amount of Phosphate and
c   Nitrogen in any given surface grid box.
c       INPUT:
c           i   =   longitudinal index for grid
c           j   =   latitudinal index for grid
c           phs =   phosphate concentration at grid(i,j)
c           no3 =   nitrate concentration at grid (i,j)
c           EP  =   export production at grid (i,j) mg C m-2 hr-1
c       OUTPUT:
c           carb2P(i,j) =   Carbon:Phosphorus ratio 
c           NtoP(i,j)   =   Nitrogen:Phosphorus ratio
c           HtoP(i,j)   =   Hydrogen:Phosphorus ratio
c           OtoP(i,j)   =   Oxygen:Phosphorus ratio
c           
c   Remin_o2(i,j)   =   moles of O2 removed during aerobic reminen
c   Remin_no3(i,j)  =   moles of NO3 removed during anaerobic remin
c
c        AUTHOR:
c           Pearse James Buchanan          
c           pearse.buchanan@utas.edu.au
c
c......................................................................c

        include "obgc.h"
        include "bio.h"
        
        INTEGER :: mld
        REAL, DIMENSION(i,j) :: NtoC  
        REAL :: phospho, nucleic, ATP, protein, carbs,
     +          lipids, PUFA, SFA, MUFA, lipidC, lipidH, lipidO,
     +          nucleic_g, protein_g, phospho_g, carb_g, ATP_g, 
     +          lipid_g,
     +          nucleicC, nucleicH, nucleicO, nucleicN, nucleicP,
     +          proteinC, proteinH, proteinO, proteinN, 
     +          phosphoC, phosphoH, phosphoO, phosphoN, phosphoP,
     +          ATPC, ATPH, ATPO, ATPN, ATPP,
     +          carbC, carbH, carbO,
     +          molarC, molarH, molarO, molarN, molarP,
     +          decay, solar
        

* 1. determine the C:P and N:P ratios based on the nutrient limitation
*    scheme defined by Galbraith & Martiny (2015) PNAS, which first
*    caluclates C:P and N:C, after which we can calculate N:P.        
        carb2P(i,j) = 1.0/((6.9*phs + 6.0)/1000.0) * fm(i,1)
        NtoC(i,j) = 0.125 + 0.03*no3/(0.32+no3) * fm(i,1)
        NtoP(i,j) = carb2P(i,j)*NtoC(i,j) * fm (i,1)


        if (biomol) then
* 2. calculate % by weight of phosphoglycerides
           phospho = 5. + 10. * (phs/(phs+1.0))

* 3. prescribe nucleic acid and ATP %           
           nucleic = 9.
           ATP = 0.1

* 4. calculate % of proteins
           molarP = ( nucleic*(31./341.) + phospho*(31./714.72) +
     +                ATP*(93./507.) )/31.
           molarN = NtoP(i,j)*molarP
           protein = ( molarN*14. - nucleic*(52.5/341.) - 
     +                 phospho*(6.02/714.72) - ATP*(70./507.) )
     +                / (560./3320.)

* 5. calculate carbs and lipid %
           if (solarcarb) then
              ! find mixed layer depth
              k = 1
              mld = k
       
              do k = 1,km 
                 if (mld.eq.k .and. k.le.kmt(i,j)-1) then
                    if (abs (tb(i,1,1) - tb(i,k,1)) .lt. .01) then
                       mld = k
                    endif
                 endif
              enddo
              xmld(i,j) = (zt(mld) + dzt(mld)*0.5)/100.0   !cm --> m
       
              ! find solar saturation
              decay = 0.01148   !(Morel & Maritorena, 2001)
              solar = (obc(i,j,m,2)/10.) * exp(-decay*xmld(i,j))
        
              ! find carbohydrate %
              carbs = (100. - protein - phospho - nucleic - ATP)*0.5
     +                *(0.5 + 1.4*(solar/10.0))
           else
              carbs = (100. - protein - phospho - nucleic - ATP)*0.5*1.4
           endif
           
           lipids = 100. - protein - phospho - nucleic - ATP - carbs
        
* 6. calculate lipid elemental composition
           PUFA = (41.2 - 0.433*tb(i,1,1))/100.0
           SFA = (27.3 + 0.279*tb(i,1,1))/100.0
           MUFA = 1. - PUFA - SFA

           lipidC = PUFA*21. + MUFA*18. + SFA*15.
           lipidH = PUFA*31. + MUFA*30. + SFA*34.
           lipidO = 2.

* 7. calculate the grams of each element in the organic matter
           nucleic_g = 12*9.625 + 14.0 + 16*8.0 + 14*3.75 + 31.0
           protein_g = 12*147.0 + 228.0 + 16*46.0 + 14*40.0 + 32.0
           phospho_g = 12*37.9 + 72.5 + 16*9.4 + 14*0.43 + 31.0
           carb_g = 12*6.0 + 10.0 + 16*2.0 
           ATP_g = 12*10.0 + 16.0 + 16*13.0 + 14*5.0 + 3*31.0
           lipid_g = 12.0*lipidC + lipidH + lipidO*16.0
           
           nucleicC = (12.0*9.625)/nucleic_g
           nucleicH = 14.0/nucleic_g
           nucleicO = (16.0*8.0)/nucleic_g
           nucleicN = (14.0*3.75)/nucleic_g 
           nucleicP = 31.0/nucleic_g

           proteinC = (12.0*147.0)/protein_g
           proteinH = 228.0/protein_g
           proteinO = (16.0*46.0)/protein_g
           proteinN = (14.0*40.0)/protein_g 

           phosphoC = (12.0*37.9)/phospho_g
           phosphoH = 72.5/phospho_g
           phosphoO = (16.0*9.4)/phospho_g
           phosphoN = (14.0*0.43)/phospho_g 
           phosphoP = 31.0/phospho_g

           carbC = (12.0*6.0)/carb_g
           carbH = 10.0/carb_g
           carbO = (16.0*5.0)/carb_g

           ATPC = (12.0*10.0)/ATP_g
           ATPH = 16.0/ATP_g
           ATPO = (16.0*13.0)/ATP_g
           ATPN = (14.0*5.0)/ATP_g 
           ATPP = (31.0*3.0)/ATP_g

           lipidC = (lipidC*12.0)/lipid_g
           lipidH = lipidH/lipid_g
           lipidO = (lipidO*16.0)/lipid_g

* 8. calculate the molar mass of each element
           molarC = (nucleicC*nucleic + proteinC*protein + 
     +               phosphoC*phospho + carbC*carbs + ATPC*ATP + 
     +               lipidC*lipids)/12.
           molarH = (nucleicH*nucleic + proteinH*protein + 
     +               phosphoH*phospho + carbH*carbs + ATPH*ATP + 
     +               lipidH*lipids)
           molarO = (nucleicO*nucleic + proteinO*protein + 
     +               phosphoO*phospho + carbO*carbs + ATPO*ATP + 
     +               lipidO*lipids)/16.
           molarN = (nucleicN*nucleic + proteinN*protein + 
     +               phosphoN*phospho + ATPN*ATP)/14.
           molarP = (nucleicP*nucleic +  phosphoP*phospho +ATPP*ATP)/31.
           
* 9. calculate the new C:H:O:N:P ratios
           carb2P(i,j) = molarC/molarP
           HtoP(i,j) = molarH/molarP
           OtoP(i,j) = molarO/molarP
           NtoP(i,j) = molarN/molarP
           
        else

           HtoP(i,j) = 2*carb2P(i,j) + 3*NtoP(i,j) + 3
           OtoP(i,j) = carb2P(i,j) + 4

        endif


        
      return
      end

c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine N_iso_frac(i,j,no3,n15,n14,pon(i,k,j),ponf(i,k,j),
     +                      N15_diagnostics, loni, latj, sedfluxes,
     +                      d_n15(i,k,j),d_n15d(i,k,j),d_n15f(i,k,j),
     +                      d_n15df(i,k,j), d15Norg(i,j))

c
c   Routine to fractionate 15N during processes affecting NO3
c        
c       INPUTS:
c           i           =   longitudinal index for grid
c           j           =   latitudinal index for grid
c           k           =   depth index for grid
c           no3         =   nitrate concentration at grid box
c           n15         =   15nitrate concentration at grid box 
c           n14         =   14nitrate concentration at grid box 
c           pon(i,k,j)  =   Change in NO3 due to Org at grid box 
c           ponf(i,k,j) =   Change in NO3 due to F-Org at grid box 
c           N15_diagnostics  =   Boolean for output to screen for 15N 
c           loni / lonj      =   Write output for 15N at this coord 
c           sedfluxes   =   Boolean for sediment routine on/off 
c       OUTPUTS:
c           d_n15(i,k,j)    =   Change in 15NO3 due to assim/remin Org
c           d_n15d(i,k,j)   =   Change in 15NO3 due to denitrif Org
c           d_n15f(i,k,j)   =   Change in 15NO3 due to assim/remin F-Org
c           d_n15df(i,k,j)  =   Change in 15NO3 due to denitrif F-Org
c           d15org(i,j)     =   The del15N value or organics at sediment
c           pon15(k)     =   The del15N value or organics at sediment
c
c        AUTHOR:
c           Pearse James Buchanan          
c           pearse.buchanan@utas.edu.au
c
c......................................................................c

        include "obgc.h"
        include "bio.h"

        REAL :: on_rem, on_rem_f, no3_den, no3_den_f
        REAL, DIMENSION(k) :: pon15, pon14, pon_cons,
     +                        ponf15, ponf14, ponf_cons

        ! Initialise arrays
        on_rem = 0.0
        on_rem_f = 0.0
        no3_den = 0.0
        no3_den_f = 0.0
        tot = 0.0
        dif = 0.0

        do k = 1,kmt(i,j)

*   1  --  Calculate fractionation due to assimilation
        if (k.eq.1) then
               
           if (pon(i,k,j).gt.0.0) then ! If organic matter is created 

              ! 1. change in 15N needed to conserve delta15N
              on_rem = pon(i,k,j)
              d_n15(i,k,j) = (1.-(1./(n15/n14+1.)))*on_rem
                     
              ! 2. isotopic and nutrient utilisation coefficients
              IUC = max(0.0, n15/n14/1.0)
              NUC = min(1.0, 1.0 - (pon(i,k,j)/no3))
                     
              ! 3. change in 15N after fractionation
              d_n15(i,k,j) = (d_n15(i,k,j) * IUC) /
     +                       (1. + Eass*1e-3*NUC) 

              ! 4. store the assimilation 15N in organic matter
              pon15(k) = d_n15(i,k,j)
              pon14(k) = pon(i,k,j) - pon15(k)
              pon_cons(k) = 0.0
              
           else
              
              d_n15(i,k,j) = 0.0
              pon14(k) = 0.0
              pon15(k) = 0.0
              pon_cons(k) = 0.0

           endif

           ! 5. calculate storage of 15N due to nitrogen fixation
           if (ponf(i,k,j).gt.0.0) then

              ponf15(k) = (1. - (1./(1. + Efix*1e-3 + 1.)))
     +                 *ponf(i,k,j)
              ponf14(k) = ponf(i,k,j) - ponf15(k)
              ponf_cons(k) = 0.0
              
              ! set d_n15f to zero to account for no 15N uptake from water
              d_n15f(i,k,j) = 0.0
              
           else  ! if no N-fixation - no storage of 15N in organics

              ponf15(k) = 0.0
              ponf14(k) = 0.0
              ponf_cons(k) = 0.0
              d_n15f(i,k,j) = 0.0
               
           endif

        endif ! k.eq.1     
              

*   2  --  Calculate below surface processes:
*            TRANSFER FROM SURFACE TO SUBSURFACE (level 4)              
*            OXIC REMINERALISATION = release of 15N from organic matter              
*            PELAGIC DENITRIFICATION = consumption of 15N from water column

        if (k.gt.1 .and. k.lt.kmt(i,j)) then   
          
           ! track changes in isotopes as depth increases
           pon15(k) = pon15(k-1)*(dizt(k)/dizt(k-1))
           pon14(k) = pon14(k-1)*(dizt(k)/dizt(k-1))
              
           ! OXIC AND SUBOXIC REMINERALISATION
           ! get the release of NO3 due to remineralisation
           on_rem = (op_rem(i,k,j)+op_den(i,k,j))
     +              *dizt(k)*c2dtts*NtoP(i,j)*1e-2
           
           ! track change in consumption as depth increases
           pon_cons(k) = pon_cons(k-1) + 
     +                   (-on_rem*(dizt(1)/dizt(k)))
        
           if (on_rem.lt.0.0) then ! if stuff was remineralised
        
              ! calculate utilisation factors
              ! 2. isotopic and nutrient utilisation coefficients
              IUC = 1.0 
              NUC = min(1.0, 1.0 - (pon_cons(k)/pon(i,1,j)) )

              ! calculate the release of 15N (value negative)
              d_n15(i,k,j) = (1. - (1./(pon15(k)/pon14(k)+1.)))
     +                       *on_rem
              d_n15(i,k,j) = (d_n15(i,k,j) * IUC) /
     +                       (1. + Erem*1e-3*NUC) 
              
              ! calculate change in pon15 and pon14 due to frac
              pon15(k) = pon15(k) - (-d_n15(i,k,j))
              pon14(k) = pon14(k) - (-on_rem - (-d_n15(i,k,j)))
           
           else
              
              on_rem = 0.0
              d_n15(i,k,j) = 0.0
           
           endif

               
           ! DENITRIFICATION
           if (op_den(i,k,j).lt.0.0) then
              ! get the consumption of NO3 due to suboxic remineralisation
              no3_den = op_den(i,k,j)*dizt(k)
     +                  *c2dtts*1e-2*no3_rem(i,j)

              IUC = max(0.0, (n15/n14)/1.0) 
              NUC = min(1.0, 1. - (no3_den/no3))

              ! calculate the consumption of 15N with fractionation
              d_n15d(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                        * no3_den 
              d_n15d(i,k,j) =  (d_n15d(i,k,j) * IUC) / 
     +                         (1. + Epden*1e-3*NUC)
              
           else
              
              no3_den = 0.0
              d_n15d(i,k,j) = 0.0
            
           endif ! --> op_den(i,k,j).lt.0.0

           
           ! 2. Do the same for N-fixation
           
           ! get the release of NO3 due to remineralisation
           on_rem_f = (op_rem_f(i,k,j) + op_den_f(i,k,j)) *
     +                 dizt(k)*c2dtts*NP_fix*1e-2
              
           ! track changes in organics and isotopes as depth increases
           ponf_cons(k) = ponf_cons(k-1) + 
     +                    (-on_rem_f*(dizt(1)/dizt(k)))
           ponf15(k) = ponf15(k-1)*(dizt(k)/dizt(k-1))
           ponf14(k) = ponf14(k-1)*(dizt(k)/dizt(k-1))
         
           if (on_rem_f.lt.0.0) then
           
              ! isotopic and nutrient utilisation coefficients
              IUC = 1.0 ! concentration of isotope has no effect
              NUC = min(1.0, 1.0 - (ponf_cons(k)/ponf(i,1,j)) )

              ! calculate the release of 15N (value negative)
              d_n15f(i,k,j) = (1.-(1./(ponf15(k)/ponf14(k)+1.)))
     +                       *on_rem_f
              d_n15f(i,k,j) = (d_n15f(i,k,j) * IUC) /
     +                        (1. + Erem*1e-3*NUC) 
              

              ! calculate change in pon15 and pon14 due to frac
              ponf15(k) = ponf15(k) -(-d_n15f(i,k,j))
              ponf14(k) = ponf14(k) -(-on_rem_f-(-d_n15f(i,k,j)))

           else
             
              on_rem_f = 0.0
              d_n15f(i,k,j) = 0.0

           endif ! --> on_rem_f.lt.0.0


           ! DENITRIFICATION
           if (op_den_f(i,k,j).lt.0.0) then
              ! get the consumption of NO3 due to suboxic remineralisation
              no3_den_f = op_den_f(i,k,j)*dizt(k)*c2dtts*1e-2
     +                    *no3_rem_f  ! no3_den_f now positive

              IUC = max(0.0, (n15/n14)/1.0)
              NUC = max(0.0, min(1.0, 1.0 -
     +                 ((no3_den_f+no3_den)/no3) ))

              ! calculate the consumption of 15N with fractionation
              d_n15df(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                         * no3_den_f 
              d_n15df(i,k,j) =  (d_n15df(i,k,j) * IUC) / 
     +                          (1. + Epden*1e-3*NUC)
        
           else
             
              no3_den_f = 0.0
              d_n15df(i,k,j) = 0.0

           endif ! --> op_den(i,k,j).lt.0.0

        endif  ! --> k.gt.1 .and. k.lt.kmt(i,j) 
                  
*   3  --  Calculate sedimentary denitrification if active (i.e. sedfluxes):

        if (k.eq.kmt(i,j)) then
           
           ! First, determine whether sediment processes are active.
           ! Sedfluxes == TRUE :
           !     Release 15N in water above sediment - op_brem & op_bden
           !                                         - op_brem_f & op_bden_f
           !     Consume 15N in water above sediment - op_bden
           !                                         - op_bden_f
           !     Release 15N from sediment           - sremG & sdenG
           !                                         - sremF & sdenF
           !     Consume 15N from sediment           - sdenG
           !                                         - sdenF
           !
           ! Sedfluxes == FALSE :
           !     Release 15N in water above sediment - op_rem & op_den
           !                                         - op_rem_f & op_den_f
           !     Consume 15N in water above sediment - op_den
           !                                         - op_den_f
           
           if (sedfluxes) then
           
           if (op_tot(i,k,j).lt.0.0) then ! norm phyto hitting sediments 
              
              ! get the release of NO3 due to water and sed remineralisation
              on_rem = (op_brem(i,j) + op_bden(i,j) +
     +                  sremG(i,j) + sdenG(i,j) )
     +                  *dizt(k)*c2dtts*NtoP(i,j)*1e-2
              
              ! track changes in organics and isotopes as depth increases
              pon_cons(k) = pon_cons(k-1) + 
     +                      (-on_rem*(dizt(1)/dizt(k)))
        
              ! Check that all organic matter is consumed
              !  tot_b and tot_a should be zero if no org is created
        
              dif = pon(i,1,j)-pon_cons(k)
              tot = pon(i,1,j)+pon_cons(k)
              if (ABS(dif).gt.epsilon(tot)) then
              print*, " "
              print*, " N15 REMINERALISATION FRACTIONATION     "
              print*, "       NOT CONSERVING MATTER           "
              print*, " "
              print*," PON created (mmol) = ",pon(i,1,j)
              print*," PON consumed (mmol) = ",pon_cons(k)
              print*, " "
              print*, " total = ", tot
              print*, " difference = ", dif
              print*, " "
              print*, 'i = ',i,' j = ',j,'k = ',k
              print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
              print*, " "
              print*, " "
              print*, "          STOPPING MODEL            "
              print*, " "
              print*, " "
              stop
              endif

              pon15(k) = pon15(k-1)*(dizt(k)/dizt(k-1))
              pon14(k) = pon14(k-1)*(dizt(k)/dizt(k-1))

              ! release all remaining 15N (value negative) 
              d_n15(i,k,j) = -pon15(k)

              if(sdenG(i,j).lt.0.0 .or. op_bden(i,j).lt.0.0)then
              ! get the consumption of NO3 due to suboxic remineralisation
                 tot = sdenG(i,j) + op_bden(i,j)
                 no3_den = tot*dizt(k)*c2dtts*1e-2*no3_rem(i,j)

                 IUC = max(0.0, (n15/n14)/1.0) 
*                 NUC = min(1.0,max(0.0, 1.0-no3_den/(no3-20.0))) ! dilution effect 
                 NUC = min(1.0,max(0.0, 1.0-no3_den/no3)) ! no dilution effect 

                 ! calculate the consumption of 15N with fractionation of
                 ! pelagic den --> op_bden(i,j)
                 ! sediment den --> sdenG(i,j)
                 d_n15d(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                           * no3_den 
                 d_n15d(i,k,j) = (d_n15d(i,k,j) * IUC) / (1. + 
     +                         Esden*1e-3*NUC*(sdenG(i,j)/tot) +
     +                         Epden*1e-3*NUC*(op_bden(i,j)/tot))
                 
              else
            
                 tot = 0.0
                 no3_den = 0.0
                 d_n15d(i,k,j) = 0.0
              
              endif ! --> if denitrification (water or sed)
           
           else
              
              on_rem = 0.0
              d_n15(i,k,j) = 0.0
              tot = 0.0
              no3_den = 0.0
              d_n15d(i,k,j) = 0.0
              pon15(k) = 0.0
              pon14(k) = 0.0
              pon_cons(k) = 0.0

           endif  ! --> if norm organic matter hitting sediment
           
           
           if (op_tot_f(i,k,j).lt.0.0) then ! n2 fixed org hitting sediments 
              
              ! get the release of NO3 due to water and sed remineralisation
              on_rem_f = (op_brem_f(i,j) + op_bden_f(i,j) +
     +                    sremF(i,j) + sdenF(i,j) )
     +                    *dizt(k)*c2dtts*NP_fix*1e-2
              
              ! track changes in organics and isotopes as depth increases
              ponf_cons(k) = ponf_cons(k-1) + 
     +                       (-on_rem_f*(dizt(1)/dizt(k)))
        
              ! Check that all organic matter is consumed
              !  tot_b and tot_a should be zero if no org is created
        
              dif = ponf(i,1,j)-ponf_cons(k)
              tot = ponf(i,1,j)+ponf_cons(k)
              if (ABS(dif).gt.epsilon(tot)) then
              print*, " "
              print*, " N15 REMINERALISATION FRACTIONATION     "
              print*, "       NOT CONSERVING MATTER           "
              print*, " "
              print*," PONf created (mmol) = ",ponf(i,1,j)
              print*," PONf consumed (mmol) = ",ponf_cons(k)
              print*, " "
              print*, 'i = ',i,' j = ',j,'k = ',k
              print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
              print*, " "
              print*, " "
              print*, "          STOPPING MODEL            "
              print*, " "
              print*, " "
              stop
              endif

              ponf15(k) = ponf15(k-1)*(dizt(k)/dizt(k-1))
              ponf14(k) = ponf14(k-1)*(dizt(k)/dizt(k-1))

              ! release all remaining 15N (value negative) 
              d_n15f(i,k,j) = -ponf15(k)

              if(sdenF(i,j).lt.0.0.or.op_bden_f(i,j).lt.0.0)then
              ! get the consumption of NO3 due to suboxic remineralisation
                 tot = sdenF(i,j) + op_bden_f(i,j)
                 no3_den_f = tot*dizt(k)*c2dtts*1e-2*no3_rem_f

                 IUC = max(0.0, (n15/n14)/1.0)
*                 NUC = min(1.0,max(0.0,1.0-no3_den_f/(no3-20.0)))! dilution effect 
                 NUC = min(1.0,max(0.0, 1.0 - (no3_den+no3_den_f)
     +                                       / no3 )) ! no dilution effect 

                 ! calculate the consumption of 15N with fractionation of
                 ! pelagic den --> op_bden_f(i,j)
                 ! sediment den --> sdenF(i,j)
                 d_n15df(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                           * no3_den_f 
                 d_n15df(i,k,j) = (d_n15df(i,k,j) * IUC) / (1. + 
     +                         Esden*1e-3*NUC*(sdenF(i,j)/tot) +
     +                       Epden*1e-3*NUC*(op_bden_f(i,j)/tot))
              
              else
            
                 tot = 0.0
                 no3_den_f = 0.0
                 d_n15df(i,k,j) = 0.0
              
              endif ! --> if denitrification (water or sed)
           
           else
             
              on_rem_f = 0.0
              d_n15f(i,k,j) = 0.0
              tot = 0.0
              no3_den_f = 0.0
              d_n15df(i,k,j) = 0.0
              ponf15(k) = 0.0
              ponf14(k) = 0.0
              ponf_cons(k) = 0.0

           endif  ! --> if n2 fixed organic matter hitting sediment

          
           else  ! --> that sedfluxes==FALSE
          

           ! track changes in isotopes as depth increases
           pon15(k) = pon15(k-1)*(dizt(k)/dizt(k-1))
           pon14(k) = pon14(k-1)*(dizt(k)/dizt(k-1))
              
           ! OXIC AND SUBOXIC REMINERALISATION
           ! get the release of NO3 due to remineralisation
           on_rem = (op_rem(i,k,j)+op_den(i,k,j))
     +              *dizt(k)*c2dtts*NtoP(i,j)*1e-2
           
           ! track changes consumption as depth increases
           pon_cons(k) = pon_cons(k-1) + 
     +                   (-on_rem*(dizt(1)/dizt(k)))
        
           ! Check that all organic matter is consumed
           !  tot_b and tot_a should be zero if no org is created
        
           dif = pon(i,1,j)-pon_cons(k)
           tot = pon(i,1,j)+pon_cons(k)
           if (ABS(dif).gt.epsilon(tot)) then
           print*, " "
           print*, " N15 REMINERALISATION FRACTIONATION     "
           print*, "       NOT CONSERVING MATTER           "
           print*, " "
           print*," PON created (mmol) = ",pon(i,1,j)
           print*," PON consumed (mmol) = ",pon_cons(k)
           print*, " "
           print*, 'i = ',i,' j = ',j,'k = ',k
           print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
           print*, " "
           print*, " "
           print*, "          STOPPING MODEL            "
           print*, " "
           print*, " "
           stop
           endif

           if (on_rem.lt.0.0) then ! if stuff was remineralised
              
              ! release all remaining 15N (value negative) 
              d_n15(i,k,j) = -pon15(k)

           else
              
              tot = 0.0
              dif = 0.0
              on_rem = 0.0
              d_n15(i,k,j) = 0.0

           endif ! --> on_rem.lt.0.0

           
           ! DENITRIFICATION
           if (op_den(i,k,j).lt.0.0) then
              ! get the consumption of NO3 due to suboxic remineralisation
              no3_den = op_den(i,k,j)*dizt(k)
     +                  *c2dtts*1e-2*no3_rem(i,j)

              IUC = max(0.0, (n15/n14)/1.0)
*              NUC = min(1.0,max(0.0, 1.0-no3_den/(no3-20.0))) ! dilution effect 
              NUC = min(1.0, 1. - (no3_den/no3)) ! no dilution effect

              ! calculate the consumption of 15N with fractionation
              d_n15d(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                        * no3_den 
              d_n15d(i,k,j) =  (d_n15d(i,k,j) * IUC) / 
     +                         (1. + Epden*1e-3*NUC)
           
           else
              
              tot = 0.0
              dif = 0.0
              no3_den = 0.0
              d_n15d(i,k,j) = 0.0

           endif ! --> op_den(i,k,j).lt.0.0

           
           ! 2. Do the same for N-fixation
           
           ! OXIC AND SUBOXIC REMINERALISATION
           ! get the release of NO3 due to remineralisation
           on_rem_f = (op_rem_f(i,k,j) + op_den_f(i,k,j)) *
     +                 dizt(k)*c2dtts*NP_fix*1e-2
              
           ! track changes in organics and isotopes as depth increases
           ponf_cons(k) = ponf_cons(k-1) + 
     +                    (-on_rem_f*(dizt(1)/dizt(k)))
           ponf15(k) = ponf15(k-1)*(dizt(k)/dizt(k-1))
           ponf14(k) = ponf14(k-1)*(dizt(k)/dizt(k-1))
              
           ! Check that all organic matter is consumed
           !  tot_b and tot_a should be zero if no org is created
           dif = ponf(i,1,j)-ponf_cons(k)
           tot = ponf(i,1,j)+ponf_cons(k)
           if (ABS(dif).gt.epsilon(tot)) then
           print*, " "
           print*, " N15 REMINERALISATION FRACTIONATION     "
           print*, "       NOT CONSERVING MATTER           "
           print*, " "
           print*," PONf created (mmol) = ",ponf(i,1,j)
           print*," PONf consumed (mmol) = ",ponf_cons(k)
           print*, " "
           print*, 'i = ',i,' j = ',j,'k = ',k
           print*, 'lon = ',i*2.8125,' lat = ',j*1.59-90
           print*, " "
           print*, " "
           print*, "          STOPPING MODEL            "
           print*, " "
           print*, " "
           stop
           endif
         
           if (on_rem_f.lt.0.0) then
         
              ! release all remaining 15N (value negative) 
              d_n15f(i,k,j) = -ponf15(k)

           else
             
              tot = 0.0
              dif = 0.0
              on_rem_f = 0.0
              d_n15f(i,k,j) = 0.0

           endif ! --> on_rem_f.lt.0.0
           
           
           ! DENITRIFICATION
           if (op_den_f(i,k,j).lt.0.0) then
              ! get the consumption of NO3 due to suboxic remineralisation
              no3_den_f = op_den_f(i,k,j)*dizt(k)*c2dtts*1e-2
     +                    *no3_rem_f  ! no3_den_f now positive

              IUC = max(0.0, (n15/n14)/1.0)
*              NUC = max(0.0, min(1.0, 1.0 -
*     +                 ((no3_den_f+no3_den)/(no3-20.0)) )) 
              NUC = max(0.0, min(1.0, 1.0 -
     +                 ((no3_den_f+no3_den)/no3) )) 

               ! calculate the consumption of 15N with fractionation
              d_n15df(i,k,j) = (1. - (1. /(n15/n14 + 1.)))
     +                         * no3_den_f 
              d_n15df(i,k,j) =  (d_n15df(i,k,j) * IUC) / 
     +                          (1. + Epden*1e-3*NUC)
           
           else
             
              tot = 0.0
              dif = 0.0
              no3_den_f = 0.0
              d_n15df(i,k,j) = 0.0
           
           endif ! --> op_den_f(i,k,j).lt.0.0

           
           endif  ! --> sedfluxes==TRUE 
                 


*   4  --   Save delta 15N of raining organic matter hitting sediments:

           if (pon15(k).gt.0.0 .or. ponf15(k).gt.0.0) then 
              d15Norg(i,j) = ( (pon15(k)+ponf15(k)) /
     +                         (pon14(k)+ponf14(k))-1.0)*1e3
           endif
        

        endif  ! --> k.eq.kmt(i,j) 


        if (N15diagnostics .and. j.eq.latj .and. i.eq.loni) then
          call print_15N_calcs(i,k,j,no3,n15,pon(i,k,j),on_rem
     +                         no3_den, on_rem_f, no3_den_f,
     +                         op_tot(i,k,j), IUC, NUC,
     +                         pon15(k), pon14(k), pon_cons(k),
     +                         ponf15(k),ponf14(k),ponf_cons(k),
     +                         d_n15(i,k,j), d_n15d(i,k,j),
     +                         d_n15f(i,k,j), d_n15df(i,k,j))
        endif

        enddo ! --> do k = 1,kmt(i,j)

        return
        end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c


c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine print_15N_calcs(i,k,j,no3,n15,pon(i,k,j),on_rem
     +                           no3_den, on_rem_f, no3_den_f,
     +                           op_tot(i,k,j), IUC, NUC,
     +                           pon15(k), pon14(k), pon_cons(k),
     +                           ponf15(k),ponf14(k),ponf_cons(k),
     +                           d_n15(i,k,j), d_n15d(i,k,j),
     +                           d_n15f(i,k,j), d_n15df(i,k,j))



        print*, " "
        print*, " "
        print*, " RESULTS FOR SOURCE EQUATION "
        print*,"depth=",k,"lat=",j*1.59,"lon=",i*2.8125
        print*, "NO3 = ",no3,"15N = ",n15
        print*, "Old delta15N = ",(( (n15 / 
     +                              (no3-n15))
     +                           / 1.0) -1.)*1000.
        print*, "NO3 assim = ",on_rem, on_rem_f
        print*, "NO3 denit = ",no3_den, no3_den_f
        print*, "15N assim = ",d_n15(i,k,j),
     +           d_n15f(i,k,j)
        print*, "15N denit = ",d_n15d(i,k,j),
     +           d_n15df(i,k,j)
        print*, "New delta15N = ", (( 
     +  ((n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) /
     +                ( (no3-on_rem-on_rem_f-no3_den-no3_den_f) -
     +   (n15-d_n15(i,k,j)-d_n15f(i,k,j)-d_n15d(i,k,j)-d_n15df(i,k,j)) 
     +                  )) / 1.0) -1.)*1000.
        endif
        endif






cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c

c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine atm_source (joff, js, je, is, ie, n)


#ifdef rjm_atm_source
c
c
c  Routine to determine the surface sources for the co2 perturbation
c     input:
c       joff = offset relating "j" in the MW to latitude "jrow"
c       js   = starting row in the MW
c       je   = ending row in the MW
c       is   = starting longitude index in the MW
c       ie   = ending longitude index in the MW
c
c    author:  r.j.matear  e-mail richard.matear@ml.csiro.au
c
c  Setup for the following tracer order
c  dCO2
c......................................................................c

      include "param.h"
      include "mw.h"

      include "bio.h"
      include "bio_sbc.h"
      
      ! grid info
      include "coord.h"
      include "grdvar.h"
      
      ! c2dtts
      include "scalar.h"

      ! kmt
      include "levind.h"

      ! Time terms
      include "tmngr.h"

      parameter (istrt=2, iend=imt-1)
      save pbtime,itimes
      data pbtime,itimes /0.,0/

*   Index to use for biology
      ibdt=taum1
#ifdef ios_upstrm
      ibdt=tau
#endif
    
      if (n.eq.3 .and. joff.eq.0) then
         itimes=itimes+1
      endif

*   Modify pCO2 and C13 in atmosphere
#ifdef rjm_anthropogenic
      xspin=0.
      if (pbtime.eq.0) then
         pbtime=prelyr
      endif
      
      ttt=prelyr-pbtime
      
      if (ttt .le. xspin ) then
         pco2a=280.
      else if (ttt .le.100+xspin) then
         pco2a = 280 + 0.28048302*(ttt-xspin)
      else
         pco2a= 28.48302*exp( (ttt-100.+xspin)/41.936498)+280
      endif
      
      ! old value	fc13a = 0.01 - 1.818571e-7*(pco2a-280.)
      fc13a = 0.011164382 - 2.0225714e-7*(pco2a-280.)
      pco2a=pco2a-280 
      print *,'Pco2 evolution',ttt,prelyr,pbtime,pco2a,fc13a

#else

      pco2a=280 -280  ! set to current value
      pco2a=pco2_atm(ibdt)
      fc13a =0.011164382  ! old value .01
      print *,'Pco2 evolution',ttt,prelyr,pco2a
#endif

*   Calculate air-sea flux for other tracers
      if (igas(n-2).gt.0) then 
         do j = js,je
            jrow = j +joff
            do i = istrt,iend

               ! Only calculate for ocean points
               if (tmask(i,1,j) .ne. 0) then
                  temp=t(i,1,j,1,ibdt)
                  saln=max (0., (t(i,1,j,2,ibdt)+.035)*1e3 )

               ! For CO2 exchange
               !   umol/l *cm/s
               !   or 1e-2 mmol/m2/s
                  if (igas(n-2) .eq. 2) then

                     tdic = t(i,1,j,n,ibdt)+tr_off(n)
                     tdic_2 = tdic*tdic
                     tdic_3 = tdic_2*tdic
                     tdic_4 = tdic_2*tdic_2
                     tdic_5 = tdic*tdic_4
                 
                     pco2o(i,jrow,n_dic-2) = (1.5568 - 1.3993e-2*temp) 
     +                                       *tdic 
     +                               +(7.4706-0.20207*temp)*1e-3*tdic_2 
     +                               -(1.2748-0.12015*temp)*1e-5*tdic_3 
     +                               +(2.4491-0.12639*temp)*1e-7*tdic_4 
     +                               -(1.5468-0.15326*temp)*1e-10*tdic_5

                     !Compute CO2 solubility once and store in pop
                     if (itimes .eq. 1) then
                        tk = temp+273.15
                        tk2 = tk/100.0
                        pop(i,1,jrow) = exp( -60.2409 + 9345.17/tk + 
     +                                       23.3585*Alog(tk2) +
     +                                       saln*(2.3517E-2 - 
     +                                       2.3656E-2*tk2 + 4.7036E-3 *
     +                                       tk2*tk2) )
                     endif

                     x_co2(i,jrow) = 7.964 * sbcbio(i,jrow,1) /
     +                               schmidt_no(2,temp)**.5 * 
     +                               pop(i,1,jrow) * 2.7777778e-4
                     fluxgas(i,jrow,n-2) = x_co2(i,jrow) *
     +                                     ( pco2a - 
     +                                     pco2o(i,jrow,n_dic-2) )

#ifdef rjm_co2_dumping
                     if (i.eq.idump .and. jrow.eq.jdump) then
                        print*,'pco2',i,jrow,tdic,pco2o(i,jrow,n_dic-2),
     +                      fluxgas(i,jrow,n-2)
                     endif
#endif

                     ! C13 exchange (must include CO2 exchange)
                  elseif (igas(n-2) .eq. 5) then
                     !   cas=0.98940
                     !   csa=0.9984

                     ! Temperature Dependent fractionation
                     temk = 1./(temp+273.15)
                     cas = (-0.373*temk + 1.00019) *.9995
                     csa = (-9.866*temk + 1.02412) *.9995

                     fluxgas(i,jrow,n-2) = cas * x_co2(i,jrow) * pco2a
     +                                     * fc13a - csa * x_co2(i,jrow)
     +                                     * pco2o(i,jrow,n_dic-2)
     +                                     * ( t(i,1,j,n,ibdt) 
     +                                     + tr_off(n) )
     +                                     / ( t(i,1,j,n_dic,ibdt) 
     +                                     + tr_off(n_dic) )

                  endif    ! end tracer type 
               endif    ! end mask condition
            enddo    ! end j loop
         enddo    ! end i loop
      endif    ! end atm-source condition


* Compute sources and sinks
      do j = js,je
         jrow = j+joff

         do i = istrt,iend

#ifdef rjm_co2_dumping
            if (jrow.eq.jdump) then
               source(idump,kdump,j) = xdump * cstdxtr(i,j) * 
     +                                 dytr(jrow) * dztr(kdump)
            endif
#endif

            isurf=1.
            if (igas(n-2) .ne. 5) then
               source(i,1,j) = (fluxgas(i,jrow,n-2)*isurf )*dizt(1)
            else 
               ratio = ( t(i,1,j,n,ibdt) + tr_off(n) ) /
     +                 ( t(i,1,j,n_dic,ibdt) + tr_off(n_dic) )
               source(i,1,j) = ( fluxgas(i,jrow,n-2) * isurf ) * dizt(1)
            endif
         enddo
      enddo


#endif
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c





c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine sediment(i,k,j,n)
      
c                                                                      c
c                                                                      c
c                                                                      c
c......................................................................c
      
      include "obgc.h"
      include "bio.h"
      include "extra.h"
      
      dimension twodt(km)

      twodt(k) = c2dtts

c Check that oxygen is not less than zero
      if (n.eq.3 .and. ta(i,k,n).lt.0) then 

         rr = ratio_pop(n)
         
         if (ratio_pop(n).eq.0) then
            rr = 1.
         endif 
     
         rr=1./rr

         if (k.gt.1 .and. k.lt.kmt(i,j) ) then
            sred = min( ta(i,k,n), 0. ) / twodt(k) !*dzt(k)/twodt(k)
            ta(i,k,n) = max( ta(i,k,n), 0. )
            source(i,k+1) = source(i,k+1) + sred * dzt(k) * dizt(k+1)
            sred = sred * rr * dzt(k)
            pop(i,k,j) = pop(i,k,j) + sred
            pop(i,k+1,j) = pop(i,k+1,j) - sred
         elseif (k.eq.kmt(i,j) ) then
            sediments(i,j) = min( ta(i,k,n), 0. ) * dzt(k) 
     +                            * rr / twodt(k)
            ta(i,k,n) = max( ta(i,k,n), 0. )
            pop(i,k,j) = pop(i,k,j) + sediments(i,j)
            sum = sum + sediments(i,j)
         endif
      endif
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c




c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      function rc_atm(pco2)

c                                                                      c
c                                                                      c
c computes the c13/c12 ratio in the atmosphere                         c
c......................................................................c

      include "obgc.h"
      include "bio.h"
      
      ri=0.011164382
      ci=280./.48
      rc_atm=(ci*ri - atm_box_tot_c13)/(ci-atm_box_tot)
      !	print*,'Atm Box',ttt
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c




c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      function co2_history(ttt)

c
c
c......................................................................c

      common /co2h/ ccc(501),xxx(501)

#ifdef dmr_atm_box
      include "obgc.h"
      include "bio.h"
#endif

      data icall /0/
      save icall,ico2 

* Time to 1881 used in the co2 history
      iyr = 0  ! no need to delay start to 1880
      tstart = 1880-iyr

#ifdef dmr_atm_box
      if (icall.eq.0) then
         open(12,file='atm_box.dat',status='old')
         read(12,*) xt,pc,tot,ann,rc,tot_c13
         close(12)
         atm_box_tot=tot
         atm_box_ann=0
         atm_box_ann_c13=0
         atm_box_tot_c13=tot_c13
         atm_box_rc=rc
         icall=1
      endif
      co2_history=280 - atm_box_tot*.48
      !	print*,'Atm Box',ttt,co2_history,atm_box_tot,atm_box_ann
#else
      if (icall.eq.0) then
         atm_box_tot=0
         open(11,file='co2_history.dat',status='old')
         do i = 1,501
            read(11,*,end=91) xxx(i),ccc(i)
         enddo

 91      print*,'rjm number of co2 points is ', i-1
         ico2 = i-1
         icall=1
         close(11)
      endif

      tstart = xxx(1)-iyr   ! use the first year in the file
      if (ttt.lt.iyr) then
         co2_history=280
      else
         i1 = ttt+1-iyr
         if (i1.le.ico2-1) then 
            i2 = i1+1
            co2_history = ( ccc(i2) - ccc(i1) ) * 
     +                    (ttt - xxx(i1) + tstart) + ccc(i1)
         else
            co2_history = ccc(ico2)
         endif
      endif
#endif

      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c



c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine file_name2(i1,a7)

c......................................................................c

      character *10 a7
      character *1 a1
      character *2 a2
      character *3 a3
      a7 = 'svmo.nc000'

#ifdef cexp4
      i2 = i1-1
      i2a = i2/50
      i3 = i2a*50 +1
#else
      i2 = i1-56
      i2a = i2/15
      i3 = i2a*15 +56
#endif

      if (i3.le.9) then
         write(a1,'(i1)') i3
         a7(10:10)=a1
      elseif (i3.le.99) then
         write(a2,'(i2)') i3
         a7(9:10)=a2
      else
         write(a3,'(i3)') i3
         a7(8:10)=a3
      endif
      return
      end

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c======================================================================c




c======================================================================c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

c......................................................................c

      subroutine file_name(i1,a7)

c......................................................................c

      character *18 a7
      character *1 a1
      character *2 a2
      character *3 a3
      a7 = 'archive/com0000.nc'
      if (i1.le.9) then
         write(a1,'(i1)') i1
         a7(15:15) = a1
      elseif (i1.le.99) then
         write(a2,'(i2)') i1
         a7(14:15) = a2
      else
         write(a3,'(i3)') i1
         a7(13:15) = a3
      endif
      return
      end

#endif
